{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Desktop\\\\office work\\\\Hindi Chat Bot\\\\chatbot\\\\src\\\\component\\\\ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaMicrophone } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport \"./css/ChatInput.css\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  onSendMessage,\n  userResponse\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const {\n    transcript,\n    browserSupportsSpeechRecognition,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [history, setHistory] = useState([]); // Store conversation history\n  const [UserResponse, loadResponse] = useState([]);\n  useEffect(() => {\n    // Function to make the API request\n    const fetchResponse = async () => {\n      try {\n        const requestPayload = {\n          history: [\"no history\"],\n          current_message: {\n            \"sender\": \"user\",\n            \"text\": \"start the conversation\"\n          }\n        };\n\n        // Make the API call after 2 seconds\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\n        const botResponse = response.data.botresponse;\n        const botMessage = {\n          text: botResponse,\n          sender: \"bot\"\n        };\n        setHistory(prevHistory => [...prevHistory, botMessage]);\n        onSendMessage(botMessage);\n      } catch (error) {\n        console.error(\"Error fetching chat response:\", error);\n      }\n    };\n\n    // Set a 2-second delay before making the API request\n    const timer = setTimeout(fetchResponse, 2000);\n\n    // Clear the timer if the component unmounts before 2 seconds\n    return () => clearTimeout(timer);\n  }, [onSendMessage]);\n  const startListening = () => {\n    resetTranscript(); // Clear previous transcript\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en'\n    });\n  };\n  useEffect(() => {\n    setInput(transcript);\n  }, [transcript]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Browser does not support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  const handleSend = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: \"user\"\n      };\n      setHistory(prevHistory => [...prevHistory, userMessage]);\n      onSendMessage({\n        text: input,\n        sender: \"user\"\n      });\n      setInput(\"\"); // Clear the input after message is sent\n\n      try {\n        // Prepare the messagePayload to send to the API\n        const messagePayload = {\n          history: history.concat(userMessage),\n          current_message: {\n            sender: \"user\",\n            text: input\n          }\n        };\n\n        // Wrap messagePayload in a larger object as required by the server\n        const requestPayload = {\n          messagePayload: messagePayload\n        };\n\n        // Send message to the API\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\n        const botResponse = response.BotResponse;\n        const userResponse = response.UserResponse;\n        loadResponse(userResponse);\n        const botMessage = {\n          text: botResponse,\n          sender: \"bot\"\n        };\n\n        // Update history with bot response\n        setHistory(prevHistory => [...prevHistory, botMessage]);\n\n        // Send bot response to the parent component\n        onSendMessage(botMessage);\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown // Handle Enter key for sending\n        ,\n        placeholder: \"Type your message or hold the button to speak...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\n            stroke: \"#2f2f2f\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mic-button\",\n        onMouseUp: SpeechRecognition.stopListening,\n        onMouseDown: startListening,\n        children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(ChatInput, \"fci8x6F8N+rnr8BZ4S/qZff4/gg=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","useEffect","FaMicrophone","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatInput","onSendMessage","userResponse","_s","input","setInput","transcript","browserSupportsSpeechRecognition","resetTranscript","history","setHistory","UserResponse","loadResponse","fetchResponse","requestPayload","current_message","response","post","botResponse","data","botresponse","botMessage","text","sender","prevHistory","error","console","timer","setTimeout","clearTimeout","startListening","continuous","language","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSend","trim","userMessage","messagePayload","concat","BotResponse","stopListening","handleKeyDown","e","key","className","type","value","onChange","target","onKeyDown","placeholder","onClick","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","onMouseUp","onMouseDown","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/component/ChatInput.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\nimport \"./css/ChatInput.css\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst ChatInput = ({ onSendMessage ,userResponse}) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n  const [history, setHistory] = useState([]);  // Store conversation history\r\n  const [UserResponse , loadResponse] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to make the API request\r\n    const fetchResponse = async () => {\r\n      try {\r\n        const requestPayload = {\r\n          history: [\r\n            \"no history\"\r\n          ],\r\n          current_message: { \"sender\": \"user\", \"text\": \"start the conversation\" }\r\n        } ;\r\n        \r\n        // Make the API call after 2 seconds\r\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\r\n        const botResponse = response.data.botresponse;\r\n        const botMessage = { text: botResponse, sender: \"bot\" };\r\n        setHistory((prevHistory) => [...prevHistory, botMessage]);\r\n        onSendMessage(botMessage);\r\n        \r\n\r\n      } catch (error) {\r\n        console.error(\"Error fetching chat response:\", error);\r\n      }\r\n    };\r\n\r\n    // Set a 2-second delay before making the API request\r\n    const timer = setTimeout(fetchResponse, 2000);\r\n\r\n    // Clear the timer if the component unmounts before 2 seconds\r\n    return () => clearTimeout(timer);\r\n  }, [onSendMessage]);\r\n\r\n  const startListening = () => {\r\n    resetTranscript(); // Clear previous transcript\r\n    SpeechRecognition.startListening({ continuous: true, language: 'en' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInput(transcript);\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Browser does not support speech recognition.</p>;\r\n  }\r\n\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n\r\n      const userMessage = { text: input, sender: \"user\" };\r\n      setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n      onSendMessage({ text: input, sender: \"user\" });\r\n      setInput(\"\"); // Clear the input after message is sent\r\n\r\n      try {\r\n        // Prepare the messagePayload to send to the API\r\n        const messagePayload = {\r\n          history: history.concat(userMessage),\r\n          current_message: { sender: \"user\", text: input }\r\n        };\r\n\r\n        // Wrap messagePayload in a larger object as required by the server\r\n        const requestPayload = {\r\n          messagePayload: messagePayload\r\n        };\r\n\r\n        // Send message to the API\r\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\r\n        \r\n        const botResponse = response.BotResponse;\r\n        const userResponse = response.UserResponse;\r\n\r\n        loadResponse(userResponse);\r\n        const botMessage = { text:botResponse , sender: \"bot\" };\r\n\r\n        // Update history with bot response\r\n        setHistory((prevHistory) => [...prevHistory, botMessage]);\r\n\r\n        // Send bot response to the parent component\r\n        onSendMessage(botMessage);\r\n\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error);\r\n      }\r\n\r\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (<>\r\n    <div className=\"chat-input\">\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleKeyDown}  // Handle Enter key for sending\r\n        placeholder=\"Type your message or hold the button to speak...\"\r\n        className=\"input-field\"\r\n      />\r\n      <button onClick={handleSend} className=\"send-button\">\r\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\" stroke=\"#2f2f2f\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></path>\r\n        </svg>\r\n      </button>\r\n      <button \r\n        className=\"mic-button\" \r\n        onMouseUp={SpeechRecognition.stopListening}\r\n        onMouseDown={startListening}>\r\n        <FaMicrophone />\r\n      </button>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}