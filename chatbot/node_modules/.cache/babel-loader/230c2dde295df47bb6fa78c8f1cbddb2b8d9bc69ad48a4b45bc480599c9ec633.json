{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Documents\\\\Github\\\\English-Learning-Assistant\\\\chatbot\\\\src\\\\component\\\\ChatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ChatDisplay from \"./ChatDisplay\";\nimport ChatInput from \"./ChatInput\";\nimport Navbar from \"./Navbar.jsx\";\nimport \"./css/ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\n  const chatRef = useRef(null);\n  const [expectedResponse, setExpectedResponse] = useState(\"\");\n  const handleScrollToMessage = index => {\n    if (chatRef.current) {\n      chatRef.current.scrollToMessage(index); // Call scrollToMessage using the ref\n    }\n  };\n  const handleSendMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n\n    // Only set currentResponseIndex if the message is from the bot\n    if (message.sender === \"bot\") {\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\n    }\n  };\n  const handleNewChat = () => {\n    setMessages([]);\n    setCurrentResponseIndex(-1);\n  };\n\n  // Handle navigating to the previous bot response\n  const handlePreviousResponse = () => {\n    for (let i = currentResponseIndex - 1; i >= 0; i--) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        handleScrollToMessage(i); // Scroll to the message\n        setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\n        return;\n      }\n    }\n  };\n\n  // Handle navigating to the next bot response\n  const handleNextResponse = () => {\n    for (let i = currentResponseIndex + 1; i < messages.length; i++) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        handleScrollToMessage(i); // Scroll to the message\n        setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\n        return;\n      }\n    }\n  };\n  const handleExpectedResponse = userSpeech => {\n    const response = `Expected response for: ${userSpeech}`;\n    setExpectedResponse(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onNewChat: handleNewChat,\n      onPreviousResponse: handlePreviousResponse,\n      onNextResponse: handleNextResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatDisplay, {\n      messages: messages,\n      currentResponseIndex: currentResponseIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: message => handleSendMessage(message),\n      handleExpectedResponse: handleExpectedResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), expectedResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expected-response\",\n      children: expectedResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4qTud/p2hDGuvVuoMgm5XEKhigY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ChatDisplay","ChatInput","Navbar","jsxDEV","_jsxDEV","App","_s","messages","setMessages","currentResponseIndex","setCurrentResponseIndex","chatRef","expectedResponse","setExpectedResponse","handleScrollToMessage","index","current","scrollToMessage","handleSendMessage","message","prevMessages","sender","length","handleNewChat","handlePreviousResponse","i","setTimeout","handleNextResponse","handleExpectedResponse","userSpeech","response","className","children","onNewChat","onPreviousResponse","onNextResponse","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatApp.jsx"],"sourcesContent":["import React, { useState, useRef} from \"react\";\r\nimport  ChatDisplay from \"./ChatDisplay\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Navbar from \"./Navbar.jsx\";\r\nimport \"./css/ChatApp.css\";\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\r\n  const chatRef = useRef(null);\r\n  const [expectedResponse, setExpectedResponse] = useState(\"\");\r\n\r\n\r\n  const handleScrollToMessage = (index) => {\r\n    if (chatRef.current) {\r\n      chatRef.current.scrollToMessage(index); // Call scrollToMessage using the ref\r\n    }\r\n  };\r\n\r\n\r\n  const handleSendMessage = (message) => {\r\n    setMessages((prevMessages) => [...prevMessages, message]);\r\n\r\n    // Only set currentResponseIndex if the message is from the bot\r\n    if (message.sender === \"bot\") {\r\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\r\n    }\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n\r\n    setMessages([]);\r\n    setCurrentResponseIndex(-1);\r\n  };\r\n\r\n\r\n// Handle navigating to the previous bot response\r\nconst handlePreviousResponse = () => {\r\n  for (let i = currentResponseIndex - 1; i >= 0; i--) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      handleScrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n// Handle navigating to the next bot response\r\nconst handleNextResponse = () => {\r\n  for (let i = currentResponseIndex + 1; i < messages.length; i++) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      handleScrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\nconst handleExpectedResponse = (userSpeech) => {\r\n  const response = `Expected response for: ${userSpeech}`;\r\n    setExpectedResponse(response);\r\n};\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Navbar\r\n        onNewChat={handleNewChat}\r\n        onPreviousResponse={handlePreviousResponse}\r\n        onNextResponse={handleNextResponse}\r\n      />\r\n      <ChatDisplay messages={messages} currentResponseIndex={currentResponseIndex} />\r\n      <ChatInput onSendMessage={(message) => handleSendMessage(message)} handleExpectedResponse={handleExpectedResponse}/>\r\n      {expectedResponse && (\r\n        <div className=\"expected-response\">\r\n        {expectedResponse}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}