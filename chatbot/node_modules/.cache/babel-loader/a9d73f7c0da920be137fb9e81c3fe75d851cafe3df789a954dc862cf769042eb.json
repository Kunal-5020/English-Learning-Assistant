{"ast":null,"code":"import{useSpeechSynthesis}from'react-speech-kit';// TextToSpeech.js\nexport const textToSpeech=text=>{const speechSynthesis=window.speechSynthesis;// Create a new speech synthesis utterance\nconst utterance=new SpeechSynthesisUtterance(text);// Set properties for the speech\nutterance.pitch=1;// Default pitch\nutterance.rate=1;// Default rate\n// Set the voice to a female voice (if available)\nconst voices=speechSynthesis.getVoices();const femaleVoice=voices.find(voice=>voice.name.includes(\"Female\"))||voices[0];// Default to first voice if no female voice\nutterance.voice=femaleVoice;// Speak the text\nspeechSynthesis.speak(utterance);};// import { useEffect } from 'react';\n// const TextToSpeech = (textData) => {\n//   useEffect(() => {\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\n//     const speech = new SpeechSynthesisUtterance(textData);\n//     // Select a female voice if available, otherwise default to first available voice\n//     const voices = window.speechSynthesis.getVoices();\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n//     speech.voice = femaleVoice;\n//     // Speak the text\n//     window.speechSynthesis.speak(speech);\n//   }, [textData]); // This will run when textData changes\n// };\n// export default TextToSpeech;","map":{"version":3,"names":["useSpeechSynthesis","textToSpeech","text","speechSynthesis","window","utterance","SpeechSynthesisUtterance","pitch","rate","voices","getVoices","femaleVoice","find","voice","name","includes","speak"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["import { useSpeechSynthesis } from 'react-speech-kit';\r\n\r\n// TextToSpeech.js\r\nexport const textToSpeech = (text) => {\r\n  const speechSynthesis = window.speechSynthesis;\r\n\r\n  // Create a new speech synthesis utterance\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n\r\n  // Set properties for the speech\r\n  utterance.pitch = 1; // Default pitch\r\n  utterance.rate = 1;  // Default rate\r\n\r\n  // Set the voice to a female voice (if available)\r\n  const voices = speechSynthesis.getVoices();\r\n  const femaleVoice = voices.find(voice => voice.name.includes(\"Female\")) || voices[0]; // Default to first voice if no female voice\r\n  utterance.voice = femaleVoice;\r\n\r\n  // Speak the text\r\n  speechSynthesis.speak(utterance);\r\n};\r\n\r\n\r\n\r\n// import { useEffect } from 'react';\r\n\r\n// const TextToSpeech = (textData) => {\r\n//   useEffect(() => {\r\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n//     const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n//     // Select a female voice if available, otherwise default to first available voice\r\n//     const voices = window.speechSynthesis.getVoices();\r\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n//     speech.voice = femaleVoice;\r\n\r\n//     // Speak the text\r\n//     window.speechSynthesis.speak(speech);\r\n//   }, [textData]); // This will run when textData changes\r\n\r\n// };\r\n\r\n// export default TextToSpeech;\r\n"],"mappings":"AAAA,OAASA,kBAAkB,KAAQ,kBAAkB,CAErD;AACA,MAAO,MAAM,CAAAC,YAAY,CAAIC,IAAI,EAAK,CACpC,KAAM,CAAAC,eAAe,CAAGC,MAAM,CAACD,eAAe,CAE9C;AACA,KAAM,CAAAE,SAAS,CAAG,GAAI,CAAAC,wBAAwB,CAACJ,IAAI,CAAC,CAEpD;AACAG,SAAS,CAACE,KAAK,CAAG,CAAC,CAAE;AACrBF,SAAS,CAACG,IAAI,CAAG,CAAC,CAAG;AAErB;AACA,KAAM,CAAAC,MAAM,CAAGN,eAAe,CAACO,SAAS,CAAC,CAAC,CAC1C,KAAM,CAAAC,WAAW,CAAGF,MAAM,CAACG,IAAI,CAACC,KAAK,EAAIA,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAIN,MAAM,CAAC,CAAC,CAAC,CAAE;AACtFJ,SAAS,CAACQ,KAAK,CAAGF,WAAW,CAE7B;AACAR,eAAe,CAACa,KAAK,CAACX,SAAS,CAAC,CAClC,CAAC,CAID;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}