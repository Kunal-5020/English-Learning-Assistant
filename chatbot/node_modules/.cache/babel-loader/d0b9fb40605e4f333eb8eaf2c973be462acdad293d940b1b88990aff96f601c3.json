{"ast":null,"code":"const TextToSpeech = text => {\n  const speech = new SpeechSynthesisUtterance(text);\n  speech.lang = \"en-US\"; // Set the language to English.\n\n  // Define a function to select the female voice\n  const setVoice = () => {\n    const voices = speechSynthesis.getVoices(); // Get all available voices\n\n    // Try to find a female voice\n    const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes(\"female\"));\n\n    // If a female voice is found, use it, otherwise default to the first voice\n    speech.voice = femaleVoice || voices[0];\n    speech.volume = 1; // Max volume\n    speech.rate = 1; // Normal speed\n    speech.pitch = 1; // Normal pitch\n\n    speechSynthesis.speak(speech); // Speak the text\n  };\n\n  // Check if voices are already loaded\n  const voices = speechSynthesis.getVoices();\n  if (voices.length > 0) {\n    // If voices are already loaded, set the voice immediately\n    setVoice();\n  } else {\n    // If voices are not loaded yet, use the voiceschanged event to set the voice\n    speechSynthesis.onvoiceschanged = () => {\n      setVoice();\n    };\n  }\n};\n_c = TextToSpeech;\nexport default TextToSpeech;\n\n// import { useEffect } from 'react';\n\n// const TextToSpeech = (textData) => {\n//   useEffect(() => {\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\n\n//     const speech = new SpeechSynthesisUtterance(textData);\n\n//     // Select a female voice if available, otherwise default to first available voice\n//     const voices = window.speechSynthesis.getVoices();\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n//     speech.voice = femaleVoice;\n\n//     // Speak the text\n//     window.speechSynthesis.speak(speech);\n//   }, [textData]); // This will run when textData changes\n\n// };\n\n// export default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["TextToSpeech","text","speech","SpeechSynthesisUtterance","lang","setVoice","voices","speechSynthesis","getVoices","femaleVoice","find","voice","name","toLowerCase","includes","volume","rate","pitch","speak","length","onvoiceschanged","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["const TextToSpeech = (text) => {\r\n  const speech = new SpeechSynthesisUtterance(text);\r\n  speech.lang = \"en-US\";  // Set the language to English.\r\n\r\n  // Define a function to select the female voice\r\n  const setVoice = () => {\r\n    const voices = speechSynthesis.getVoices();  // Get all available voices\r\n\r\n    // Try to find a female voice\r\n    const femaleVoice = voices.find((voice) => voice.name.toLowerCase().includes(\"female\"));\r\n\r\n    // If a female voice is found, use it, otherwise default to the first voice\r\n    speech.voice = femaleVoice || voices[0]; \r\n\r\n    speech.volume = 1;  // Max volume\r\n    speech.rate = 1;    // Normal speed\r\n    speech.pitch = 1;   // Normal pitch\r\n\r\n    speechSynthesis.speak(speech);  // Speak the text\r\n  };\r\n\r\n  // Check if voices are already loaded\r\n  const voices = speechSynthesis.getVoices();\r\n  if (voices.length > 0) {\r\n    // If voices are already loaded, set the voice immediately\r\n    setVoice();\r\n  } else {\r\n    // If voices are not loaded yet, use the voiceschanged event to set the voice\r\n    speechSynthesis.onvoiceschanged = () => {\r\n      setVoice();\r\n    };\r\n  }\r\n};\r\n\r\nexport default TextToSpeech;\r\n\r\n\r\n\r\n// import { useEffect } from 'react';\r\n\r\n// const TextToSpeech = (textData) => {\r\n//   useEffect(() => {\r\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n//     const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n//     // Select a female voice if available, otherwise default to first available voice\r\n//     const voices = window.speechSynthesis.getVoices();\r\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n//     speech.voice = femaleVoice;\r\n\r\n//     // Speak the text\r\n//     window.speechSynthesis.speak(speech);\r\n//   }, [textData]); // This will run when textData changes\r\n\r\n// };\r\n\r\n// export default TextToSpeech;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAMC,MAAM,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;EACjDC,MAAM,CAACE,IAAI,GAAG,OAAO,CAAC,CAAE;;EAExB;EACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,MAAM,GAAGC,eAAe,CAACC,SAAS,CAAC,CAAC,CAAC,CAAE;;IAE7C;IACA,MAAMC,WAAW,GAAGH,MAAM,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;IAEvF;IACAZ,MAAM,CAACS,KAAK,GAAGF,WAAW,IAAIH,MAAM,CAAC,CAAC,CAAC;IAEvCJ,MAAM,CAACa,MAAM,GAAG,CAAC,CAAC,CAAE;IACpBb,MAAM,CAACc,IAAI,GAAG,CAAC,CAAC,CAAI;IACpBd,MAAM,CAACe,KAAK,GAAG,CAAC,CAAC,CAAG;;IAEpBV,eAAe,CAACW,KAAK,CAAChB,MAAM,CAAC,CAAC,CAAE;EAClC,CAAC;;EAED;EACA,MAAMI,MAAM,GAAGC,eAAe,CAACC,SAAS,CAAC,CAAC;EAC1C,IAAIF,MAAM,CAACa,MAAM,GAAG,CAAC,EAAE;IACrB;IACAd,QAAQ,CAAC,CAAC;EACZ,CAAC,MAAM;IACL;IACAE,eAAe,CAACa,eAAe,GAAG,MAAM;MACtCf,QAAQ,CAAC,CAAC;IACZ,CAAC;EACH;AACF,CAAC;AAACgB,EAAA,GAhCIrB,YAAY;AAkClB,eAAeA,YAAY;;AAI3B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}