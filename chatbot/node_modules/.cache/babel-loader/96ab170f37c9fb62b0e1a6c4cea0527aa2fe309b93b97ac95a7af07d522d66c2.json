{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Desktop\\\\office work\\\\Hindi Chat Bot\\\\chatbot\\\\src\\\\component\\\\ChatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ChatDisplay from \"./ChatDisplay\";\nimport ChatInput from \"./ChatInput\";\nimport Navbar from \"./Navbar.jsx\";\nimport \"./css/ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\n  const messageRefs = useRef([]); // Array to hold refs for each message\n\n  // Ensure refs are updated when messages change\n  useEffect(() => {\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\n  }, [messages]);\n  const handleSendMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n\n    // Only set currentResponseIndex if the message is from the bot\n    if (message.sender === \"bot\") {\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\n    }\n  };\n  const handleNewChat = () => {\n    setMessages([]);\n    setCurrentResponseIndex(-1);\n  };\n\n  // Scroll to the highlighted message\n  const scrollToMessage = index => {\n    setTimeout(() => {\n      const container = document.querySelector(\".chat-display\");\n      const messageElement = messageRefs.current[index];\n      if (container && messageElement) {\n        // Calculate the distance from the container’s top to the message\n        const containerTop = container.offsetTop;\n        const messageTop = messageElement.offsetTop;\n\n        // Set scrollTop to bring the message into view\n        container.scrollTop = messageTop - containerTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\n      }\n    }, 100); // Small delay to ensure smoothness\n  };\n\n  // Move to the previous bot response\n  const handlePreviousResponse = () => {\n    for (let i = currentResponseIndex - 1; i >= 0; i--) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        scrollToMessage(i); // Scroll to this message\n\n        return;\n      }\n    }\n  };\n\n  // Move to the next bot response\n  const handleNextResponse = () => {\n    for (let i = currentResponseIndex + 1; i < messages.length; i++) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        scrollToMessage(i); // Scroll to this message\n        return;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onNewChat: handleNewChat,\n      onPreviousResponse: handlePreviousResponse,\n      onNextResponse: handleNextResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatDisplay, {\n      messages: messages,\n      currentResponseIndex: currentResponseIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SfHCVi6+tsU1riTGw3hOidKzAkI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ChatDisplay","ChatInput","Navbar","jsxDEV","_jsxDEV","App","_s","messages","setMessages","currentResponseIndex","setCurrentResponseIndex","messageRefs","current","slice","length","handleSendMessage","message","prevMessages","sender","handleNewChat","scrollToMessage","index","setTimeout","container","document","querySelector","messageElement","containerTop","offsetTop","messageTop","scrollTop","clientHeight","handlePreviousResponse","i","handleNextResponse","className","children","onNewChat","onPreviousResponse","onNextResponse","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/component/ChatApp.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ChatDisplay from \"./ChatDisplay\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Navbar from \"./Navbar.jsx\";\r\nimport \"./css/ChatApp.css\";\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\r\n  const messageRefs = useRef([]); // Array to hold refs for each message\r\n\r\n  // Ensure refs are updated when messages change\r\n  useEffect(() => {\r\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (message) => {\r\n    setMessages((prevMessages) => [...prevMessages, message]);\r\n\r\n    // Only set currentResponseIndex if the message is from the bot\r\n    if (message.sender === \"bot\") {\r\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\r\n    }\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n\r\n    setMessages([]);\r\n    setCurrentResponseIndex(-1);\r\n  };\r\n\r\n // Scroll to the highlighted message\r\n const scrollToMessage = (index) => {\r\n  setTimeout(() => {\r\n    const container = document.querySelector(\".chat-display\");\r\n    const messageElement = messageRefs.current[index];\r\n    \r\n    if (container && messageElement) {\r\n      // Calculate the distance from the container’s top to the message\r\n      const containerTop = container.offsetTop;\r\n      const messageTop = messageElement.offsetTop;\r\n      \r\n      // Set scrollTop to bring the message into view\r\n      container.scrollTop = messageTop - containerTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\r\n    }\r\n  }, 100); // Small delay to ensure smoothness\r\n};\r\n\r\n\r\n\r\n// Move to the previous bot response\r\nconst handlePreviousResponse = () => {\r\n  for (let i = currentResponseIndex - 1; i >= 0; i--) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      scrollToMessage(i); // Scroll to this message\r\n      \r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n// Move to the next bot response\r\nconst handleNextResponse = () => {\r\n  for (let i = currentResponseIndex + 1; i < messages.length; i++) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      scrollToMessage(i); // Scroll to this message\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Navbar\r\n        onNewChat={handleNewChat}\r\n        onPreviousResponse={handlePreviousResponse}\r\n        onNextResponse={handleNextResponse}\r\n      />\r\n      <ChatDisplay messages={messages} currentResponseIndex={currentResponseIndex} />\r\n      <ChatInput onSendMessage={handleSendMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}