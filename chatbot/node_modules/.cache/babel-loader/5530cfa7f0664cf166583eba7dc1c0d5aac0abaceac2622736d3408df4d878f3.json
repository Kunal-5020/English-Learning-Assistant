{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Desktop\\\\office work\\\\Hindi Chat Bot\\\\chatbot\\\\src\\\\component\\\\ChatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ChatDisplay from \"./ChatDisplay\";\nimport ChatInput from \"./ChatInput\";\nimport Navbar from \"./Navbar.jsx\";\nimport \"./css/ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\n  const messageRefs = useRef([]);\n  const containerRef = useRef(null); // Reference for the message container\n\n  // Update message refs whenever messages change\n  useEffect(() => {\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\n  }, [messages]);\n  const handleSendMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n\n    // Only set currentResponseIndex if the message is from the bot\n    if (message.sender === \"bot\") {\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\n    }\n  };\n  const handleNewChat = () => {\n    setMessages([]);\n    setCurrentResponseIndex(-1);\n  };\n\n  // Smooth scroll to the target message index\n  const scrollToMessage = index => {\n    if (messageRefs.current[index] && containerRef.current) {\n      const container = containerRef.current;\n      const messageElement = messageRefs.current[index];\n\n      // Calculate the position to center the message\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\n\n      // Set scrollTop directly to ensure exact positioning\n      container.scrollTo({\n        top: centerOffset,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Handle navigating to the previous bot response\n  const handlePreviousResponse = () => {\n    for (let i = currentResponseIndex - 1; i >= 0; i--) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        scrollToMessage(i); // Scroll to the message\n        setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\n        return;\n      }\n    }\n  };\n\n  // Handle navigating to the next bot response\n  const handleNextResponse = () => {\n    for (let i = currentResponseIndex + 1; i < messages.length; i++) {\n      if (messages[i].sender === \"bot\") {\n        setCurrentResponseIndex(i);\n        scrollToMessage(i); // Scroll to the message\n        setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\n        return;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onNewChat: handleNewChat,\n      onPreviousResponse: handlePreviousResponse,\n      onNextResponse: handleNextResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatDisplay, {\n      messages: messages,\n      currentResponseIndex: currentResponseIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Uhrb82QJUJNvdd4YbPzFf6qkTGQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ChatDisplay","ChatInput","Navbar","jsxDEV","_jsxDEV","App","_s","messages","setMessages","currentResponseIndex","setCurrentResponseIndex","messageRefs","containerRef","current","slice","length","handleSendMessage","message","prevMessages","sender","handleNewChat","scrollToMessage","index","container","messageElement","offsetTop","centerOffset","clientHeight","scrollTo","top","behavior","handlePreviousResponse","i","setTimeout","handleNextResponse","className","children","onNewChat","onPreviousResponse","onNextResponse","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/component/ChatApp.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ChatDisplay from \"./ChatDisplay\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Navbar from \"./Navbar.jsx\";\r\nimport \"./css/ChatApp.css\";\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\r\n  const messageRefs = useRef([]);\r\n  const containerRef = useRef(null); // Reference for the message container\r\n\r\n  // Update message refs whenever messages change\r\n  useEffect(() => {\r\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (message) => {\r\n    setMessages((prevMessages) => [...prevMessages, message]);\r\n\r\n    // Only set currentResponseIndex if the message is from the bot\r\n    if (message.sender === \"bot\") {\r\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\r\n    }\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n\r\n    setMessages([]);\r\n    setCurrentResponseIndex(-1);\r\n  };\r\n\r\n // Smooth scroll to the target message index\r\n const scrollToMessage = (index) => {\r\n  if (messageRefs.current[index] && containerRef.current) {\r\n    const container = containerRef.current;\r\n    const messageElement = messageRefs.current[index];\r\n\r\n    // Calculate the position to center the message\r\n    const offsetTop = messageElement.offsetTop - container.offsetTop;\r\n    const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\r\n    \r\n    // Set scrollTop directly to ensure exact positioning\r\n    container.scrollTo({\r\n      top: centerOffset,\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n};\r\n\r\n// Handle navigating to the previous bot response\r\nconst handlePreviousResponse = () => {\r\n  for (let i = currentResponseIndex - 1; i >= 0; i--) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      scrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n// Handle navigating to the next bot response\r\nconst handleNextResponse = () => {\r\n  for (let i = currentResponseIndex + 1; i < messages.length; i++) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      scrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Navbar\r\n        onNewChat={handleNewChat}\r\n        onPreviousResponse={handlePreviousResponse}\r\n        onNextResponse={handleNextResponse}\r\n      />\r\n      <ChatDisplay messages={messages} currentResponseIndex={currentResponseIndex} />\r\n      <ChatInput onSendMessage={handleSendMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}