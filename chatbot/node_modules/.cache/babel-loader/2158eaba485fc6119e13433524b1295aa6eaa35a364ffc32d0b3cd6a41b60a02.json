{"ast":null,"code":"// TextToSpeech.js\nexport const textToSpeech = text => {\n  const speechSynthesis = window.speechSynthesis;\n\n  // Check if voices are already loaded\n  const voices = speechSynthesis.getVoices();\n  let femaleVoice = null;\n\n  // If voices are loaded, attempt to find a female voice\n  if (voices.length) {\n    femaleVoice = voices.find(voice => voice.name.toLowerCase().includes(\"female\"));\n  }\n\n  // Listen for voices to be loaded and select a female voice when available\n  if (!femaleVoice) {\n    speechSynthesis.onvoiceschanged = () => {\n      const updatedVoices = speechSynthesis.getVoices();\n      femaleVoice = updatedVoices.find(voice => voice.name.toLowerCase().includes(\"female\"));\n      if (femaleVoice) {\n        speakWithVoice(femaleVoice, text);\n      }\n    };\n  } else {\n    speakWithVoice(femaleVoice, text);\n  }\n  const speakWithVoice = (voice, text) => {\n    // Create a new speech synthesis utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Set the voice to the selected female voice\n    utterance.voice = voice;\n\n    // Set additional properties like pitch and rate\n    utterance.pitch = 1; // Default pitch\n    utterance.rate = 1; // Default rate\n\n    // Speak the text\n    speechSynthesis.speak(utterance);\n  };\n};\n\n// import { useEffect } from 'react';\n\n// const TextToSpeech = (textData) => {\n//   useEffect(() => {\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\n\n//     const speech = new SpeechSynthesisUtterance(textData);\n\n//     // Select a female voice if available, otherwise default to first available voice\n//     const voices = window.speechSynthesis.getVoices();\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n//     speech.voice = femaleVoice;\n\n//     // Speak the text\n//     window.speechSynthesis.speak(speech);\n//   }, [textData]); // This will run when textData changes\n\n// };\n\n// export default TextToSpeech;","map":{"version":3,"names":["textToSpeech","text","speechSynthesis","window","voices","getVoices","femaleVoice","length","find","voice","name","toLowerCase","includes","onvoiceschanged","updatedVoices","speakWithVoice","utterance","SpeechSynthesisUtterance","pitch","rate","speak"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["// TextToSpeech.js\r\nexport const textToSpeech = (text) => {\r\n  const speechSynthesis = window.speechSynthesis;\r\n\r\n  // Check if voices are already loaded\r\n  const voices = speechSynthesis.getVoices();\r\n  let femaleVoice = null;\r\n\r\n  // If voices are loaded, attempt to find a female voice\r\n  if (voices.length) {\r\n    femaleVoice = voices.find(voice => voice.name.toLowerCase().includes(\"female\"));\r\n  }\r\n\r\n  // Listen for voices to be loaded and select a female voice when available\r\n  if (!femaleVoice) {\r\n    speechSynthesis.onvoiceschanged = () => {\r\n      const updatedVoices = speechSynthesis.getVoices();\r\n      femaleVoice = updatedVoices.find(voice => voice.name.toLowerCase().includes(\"female\"));\r\n      if (femaleVoice) {\r\n        speakWithVoice(femaleVoice, text);\r\n      }\r\n    };\r\n  } else {\r\n    speakWithVoice(femaleVoice, text);\r\n  }\r\n\r\n  const speakWithVoice = (voice, text) => {\r\n    // Create a new speech synthesis utterance\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    \r\n    // Set the voice to the selected female voice\r\n    utterance.voice = voice;\r\n\r\n    // Set additional properties like pitch and rate\r\n    utterance.pitch = 1;  // Default pitch\r\n    utterance.rate = 1;   // Default rate\r\n\r\n    // Speak the text\r\n    speechSynthesis.speak(utterance);\r\n  };\r\n};\r\n\r\n\r\n\r\n// import { useEffect } from 'react';\r\n\r\n// const TextToSpeech = (textData) => {\r\n//   useEffect(() => {\r\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n//     const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n//     // Select a female voice if available, otherwise default to first available voice\r\n//     const voices = window.speechSynthesis.getVoices();\r\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n//     speech.voice = femaleVoice;\r\n\r\n//     // Speak the text\r\n//     window.speechSynthesis.speak(speech);\r\n//   }, [textData]); // This will run when textData changes\r\n\r\n// };\r\n\r\n// export default TextToSpeech;\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EACpC,MAAMC,eAAe,GAAGC,MAAM,CAACD,eAAe;;EAE9C;EACA,MAAME,MAAM,GAAGF,eAAe,CAACG,SAAS,CAAC,CAAC;EAC1C,IAAIC,WAAW,GAAG,IAAI;;EAEtB;EACA,IAAIF,MAAM,CAACG,MAAM,EAAE;IACjBD,WAAW,GAAGF,MAAM,CAACI,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC;EACjF;;EAEA;EACA,IAAI,CAACN,WAAW,EAAE;IAChBJ,eAAe,CAACW,eAAe,GAAG,MAAM;MACtC,MAAMC,aAAa,GAAGZ,eAAe,CAACG,SAAS,CAAC,CAAC;MACjDC,WAAW,GAAGQ,aAAa,CAACN,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC;MACtF,IAAIN,WAAW,EAAE;QACfS,cAAc,CAACT,WAAW,EAAEL,IAAI,CAAC;MACnC;IACF,CAAC;EACH,CAAC,MAAM;IACLc,cAAc,CAACT,WAAW,EAAEL,IAAI,CAAC;EACnC;EAEA,MAAMc,cAAc,GAAGA,CAACN,KAAK,EAAER,IAAI,KAAK;IACtC;IACA,MAAMe,SAAS,GAAG,IAAIC,wBAAwB,CAAChB,IAAI,CAAC;;IAEpD;IACAe,SAAS,CAACP,KAAK,GAAGA,KAAK;;IAEvB;IACAO,SAAS,CAACE,KAAK,GAAG,CAAC,CAAC,CAAE;IACtBF,SAAS,CAACG,IAAI,GAAG,CAAC,CAAC,CAAG;;IAEtB;IACAjB,eAAe,CAACkB,KAAK,CAACJ,SAAS,CAAC;EAClC,CAAC;AACH,CAAC;;AAID;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}