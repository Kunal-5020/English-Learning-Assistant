{"ast":null,"code":"import { useSpeechSynthesis } from 'react-speech-kit';\n\n// TextToSpeech.js\nexport const textToSpeech = text => {\n  const speechSynthesis = window.speechSynthesis;\n\n  // Create a new speech synthesis utterance\n  const utterance = new SpeechSynthesisUtterance(text);\n\n  // Set properties for the speech\n  utterance.pitch = 1; // Default pitch\n  utterance.rate = 1; // Default rate\n\n  // Set the voice to a female voice (if available)\n  const voices = speechSynthesis.getVoices();\n  const femaleVoice = voices.find(voice => voice.name.includes(\"Female\")) || voices[0]; // Default to first voice if no female voice\n  utterance.voice = femaleVoice;\n\n  // Speak the text\n  speechSynthesis.speak(utterance);\n};\n\n// import { useEffect } from 'react';\n\n// const TextToSpeech = (textData) => {\n//   useEffect(() => {\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\n\n//     const speech = new SpeechSynthesisUtterance(textData);\n\n//     // Select a female voice if available, otherwise default to first available voice\n//     const voices = window.speechSynthesis.getVoices();\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n//     speech.voice = femaleVoice;\n\n//     // Speak the text\n//     window.speechSynthesis.speak(speech);\n//   }, [textData]); // This will run when textData changes\n\n// };\n\n// export default TextToSpeech;","map":{"version":3,"names":["useSpeechSynthesis","textToSpeech","text","speechSynthesis","window","utterance","SpeechSynthesisUtterance","pitch","rate","voices","getVoices","femaleVoice","find","voice","name","includes","speak"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["import { useSpeechSynthesis } from 'react-speech-kit';\r\n\r\n// TextToSpeech.js\r\nexport const textToSpeech = (text) => {\r\n  const speechSynthesis = window.speechSynthesis;\r\n\r\n  // Create a new speech synthesis utterance\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n\r\n  // Set properties for the speech\r\n  utterance.pitch = 1; // Default pitch\r\n  utterance.rate = 1;  // Default rate\r\n\r\n  // Set the voice to a female voice (if available)\r\n  const voices = speechSynthesis.getVoices();\r\n  const femaleVoice = voices.find(voice => voice.name.includes(\"Female\")) || voices[0]; // Default to first voice if no female voice\r\n  utterance.voice = femaleVoice;\r\n\r\n  // Speak the text\r\n  speechSynthesis.speak(utterance);\r\n};\r\n\r\n\r\n\r\n// import { useEffect } from 'react';\r\n\r\n// const TextToSpeech = (textData) => {\r\n//   useEffect(() => {\r\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n//     const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n//     // Select a female voice if available, otherwise default to first available voice\r\n//     const voices = window.speechSynthesis.getVoices();\r\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n//     speech.voice = femaleVoice;\r\n\r\n//     // Speak the text\r\n//     window.speechSynthesis.speak(speech);\r\n//   }, [textData]); // This will run when textData changes\r\n\r\n// };\r\n\r\n// export default TextToSpeech;\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,kBAAkB;;AAErD;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EACpC,MAAMC,eAAe,GAAGC,MAAM,CAACD,eAAe;;EAE9C;EACA,MAAME,SAAS,GAAG,IAAIC,wBAAwB,CAACJ,IAAI,CAAC;;EAEpD;EACAG,SAAS,CAACE,KAAK,GAAG,CAAC,CAAC,CAAC;EACrBF,SAAS,CAACG,IAAI,GAAG,CAAC,CAAC,CAAE;;EAErB;EACA,MAAMC,MAAM,GAAGN,eAAe,CAACO,SAAS,CAAC,CAAC;EAC1C,MAAMC,WAAW,GAAGF,MAAM,CAACG,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAIN,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACtFJ,SAAS,CAACQ,KAAK,GAAGF,WAAW;;EAE7B;EACAR,eAAe,CAACa,KAAK,CAACX,SAAS,CAAC;AAClC,CAAC;;AAID;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}