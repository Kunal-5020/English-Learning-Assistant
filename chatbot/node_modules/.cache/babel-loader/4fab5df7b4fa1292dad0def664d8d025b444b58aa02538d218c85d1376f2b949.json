{"ast":null,"code":"import React,{useEffect,useRef,useImperativeHandle}from\"react\";import\"./css/ChatDisplay.css\";import{textToSpeech}from\"../voice/TextToSpeech\";// Import the updated TextToSpeech function\nimport botIcon from'../asset/ai.png';import speakerIcon from'../asset/speaker.png';// ChatDisplay Component wrapped with React.forwardRef\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatDisplay=/*#__PURE__*/React.forwardRef((_ref,ref)=>{let{messages,currentResponseIndex}=_ref;const chatEndRef=useRef(null);const messageRefs=useRef([]);// Reference to store message elements\nconst containerRef=useRef(null);// Reference for the message container\n// Update message refs whenever messages change\nuseEffect(()=>{messageRefs.current=messageRefs.current.slice(0,messages.length);},[messages]);useEffect(()=>{var _chatEndRef$current;(_chatEndRef$current=chatEndRef.current)===null||_chatEndRef$current===void 0?void 0:_chatEndRef$current.scrollIntoView({behavior:\"smooth\"});},[messages,currentResponseIndex]);// Smooth scroll to the target message index\nconst scrollToMessage=index=>{if(messageRefs.current[index]&&containerRef.current){const container=containerRef.current;const messageElement=messageRefs.current[index];// Calculate the position to center the message\nconst offsetTop=messageElement.offsetTop-container.offsetTop;const centerOffset=offsetTop-container.clientHeight/2+messageElement.clientHeight/2;// Set scrollTop directly to ensure exact positioning\ncontainer.scrollTo({top:centerOffset,behavior:\"smooth\"});}};// Expose the scrollToMessage function to the parent component\nuseImperativeHandle(ref,()=>({scrollToMessage}));// Function to handle the speaker icon click\nconst handleSpeakClick=messageText=>{textToSpeech(messageText);// Pass the message text to TextToSpeech function\n};return/*#__PURE__*/_jsxs(\"div\",{ref:containerRef,className:\"chat-display\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{ref:el=>messageRefs.current[index]=el,className:`message ${msg.sender} ${index===currentResponseIndex?\"highlighted\":\"\"}`,children:[msg.sender===\"bot\"&&/*#__PURE__*/_jsx(\"span\",{className:\"bot-icon\",children:/*#__PURE__*/_jsx(\"img\",{src:botIcon// Use the imported image here\n,alt:\"Chatbot Icon\",style:{width:\"50px\",height:\"52px\",paddingBottom:\"10px\"}})}),/*#__PURE__*/_jsx(\"span\",{className:\"message-text\",dangerouslySetInnerHTML:{__html:msg.text}}),msg.sender==='bot'&&/*#__PURE__*/_jsx(\"img\",{src:speakerIcon// Use the imported image here\n,alt:\"Speaker Icon\",style:{position:\"absolute\",top:\"25px\",right:\"15px\",height:\"18px\",width:\"18px\",cursor:\"pointer\"},onClick:()=>handleSpeakClick(msg.text)// Pass the message's text to the function\n})]},index)),/*#__PURE__*/_jsx(\"div\",{ref:chatEndRef})]});});export default ChatDisplay;","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","textToSpeech","botIcon","speakerIcon","jsx","_jsx","jsxs","_jsxs","ChatDisplay","forwardRef","_ref","ref","messages","currentResponseIndex","chatEndRef","messageRefs","containerRef","current","slice","length","_chatEndRef$current","scrollIntoView","behavior","scrollToMessage","index","container","messageElement","offsetTop","centerOffset","clientHeight","scrollTo","top","handleSpeakClick","messageText","className","children","map","msg","el","sender","src","alt","style","width","height","paddingBottom","dangerouslySetInnerHTML","__html","text","position","right","cursor","onClick"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatDisplay.jsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle } from \"react\";\r\nimport \"./css/ChatDisplay.css\";\r\nimport { textToSpeech } from \"../voice/TextToSpeech\"; // Import the updated TextToSpeech function\r\nimport botIcon from '../asset/ai.png';\r\nimport speakerIcon from '../asset/speaker.png';\r\n\r\n// ChatDisplay Component wrapped with React.forwardRef\r\nconst ChatDisplay = React.forwardRef(({ messages, currentResponseIndex }, ref) => {\r\n  const chatEndRef = useRef(null);\r\n  const messageRefs = useRef([]); // Reference to store message elements\r\n  const containerRef = useRef(null); // Reference for the message container\r\n\r\n  // Update message refs whenever messages change\r\n  useEffect(() => {\r\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages, currentResponseIndex]);\r\n\r\n  // Smooth scroll to the target message index\r\n  const scrollToMessage = (index) => {\r\n    if (messageRefs.current[index] && containerRef.current) {\r\n      const container = containerRef.current;\r\n      const messageElement = messageRefs.current[index];\r\n\r\n      // Calculate the position to center the message\r\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\r\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\r\n\r\n      // Set scrollTop directly to ensure exact positioning\r\n      container.scrollTo({\r\n        top: centerOffset,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Expose the scrollToMessage function to the parent component\r\n  useImperativeHandle(ref, () => ({\r\n    scrollToMessage,\r\n  }));\r\n\r\n  // Function to handle the speaker icon click\r\n  const handleSpeakClick = (messageText) => {\r\n    textToSpeech(messageText); // Pass the message text to TextToSpeech function\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"chat-display\">\r\n      {messages.map((msg, index) => (\r\n        <div\r\n          key={index}\r\n          ref={(el) => (messageRefs.current[index] = el)}\r\n          className={`message ${msg.sender} ${index === currentResponseIndex ? \"highlighted\" : \"\"}`}\r\n        >\r\n          {msg.sender === \"bot\" && (\r\n            <span className=\"bot-icon\">\r\n              <img\r\n                src={botIcon} // Use the imported image here\r\n                alt=\"Chatbot Icon\"\r\n                style={{ width: \"50px\", height: \"52px\", paddingBottom: \"10px\" }}\r\n              />\r\n            </span>\r\n          )}\r\n          <span className=\"message-text\" dangerouslySetInnerHTML={{ __html: msg.text }}></span>\r\n          {msg.sender === 'bot' && (\r\n            <img\r\n              src={speakerIcon} // Use the imported image here\r\n              alt=\"Speaker Icon\"\r\n              style={{ position: \"absolute\", top: \"25px\", right: \"15px\", height: \"18px\", width: \"18px\", cursor: \"pointer\" }}\r\n              onClick={() => handleSpeakClick(msg.text)} // Pass the message's text to the function\r\n            />\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div ref={chatEndRef} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}