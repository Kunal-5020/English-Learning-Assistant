{"ast":null,"code":"import React,{useState,useRef}from\"react\";import ChatDisplay from\"./ChatDisplay\";import ChatInput from\"./ChatInput\";import Navbar from\"./Navbar.jsx\";import\"./css/ChatApp.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[messages,setMessages]=useState([]);const[currentResponseIndex,setCurrentResponseIndex]=useState(-1);const chatRef=useRef(null);const handleScrollToMessage=index=>{if(chatRef.current){chatRef.current.scrollToMessage(index);// Call scrollToMessage using the ref\n}};const handleSendMessage=message=>{setMessages(prevMessages=>[...prevMessages,message]);// Only set currentResponseIndex if the message is from the bot\nif(message.sender===\"bot\"){setCurrentResponseIndex(messages.length);// Set current index to the latest bot message\n}};const handleNewChat=()=>{setMessages([]);setCurrentResponseIndex(-1);};// Handle navigating to the previous bot response\nconst handlePreviousResponse=()=>{for(let i=currentResponseIndex-1;i>=0;i--){if(messages[i].sender===\"bot\"){setCurrentResponseIndex(i);handleScrollToMessage(i);// Scroll to the message\nsetTimeout(()=>setCurrentResponseIndex(-1),3000);// Remove highlight after 3 seconds\nreturn;}}};// Handle navigating to the next bot response\nconst handleNextResponse=()=>{for(let i=currentResponseIndex+1;i<messages.length;i++){if(messages[i].sender===\"bot\"){setCurrentResponseIndex(i);handleScrollToMessage(i);// Scroll to the message\nsetTimeout(()=>setCurrentResponseIndex(-1),3000);// Remove highlight after 3 seconds\nreturn;}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(Navbar,{onNewChat:handleNewChat,onPreviousResponse:handlePreviousResponse,onNextResponse:handleNextResponse}),/*#__PURE__*/_jsx(ChatDisplay,{messages:messages,currentResponseIndex:currentResponseIndex}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage})]});};export default App;","map":{"version":3,"names":["React","useState","useRef","ChatDisplay","ChatInput","Navbar","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","currentResponseIndex","setCurrentResponseIndex","chatRef","handleScrollToMessage","index","current","scrollToMessage","handleSendMessage","message","prevMessages","sender","length","handleNewChat","handlePreviousResponse","i","setTimeout","handleNextResponse","className","children","onNewChat","onPreviousResponse","onNextResponse","onSendMessage"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatApp.jsx"],"sourcesContent":["import React, { useState, useRef} from \"react\";\r\nimport  ChatDisplay from \"./ChatDisplay\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Navbar from \"./Navbar.jsx\";\r\nimport \"./css/ChatApp.css\";\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentResponseIndex, setCurrentResponseIndex] = useState(-1);\r\n  const chatRef = useRef(null);\r\n\r\n\r\n  const handleScrollToMessage = (index) => {\r\n    if (chatRef.current) {\r\n      chatRef.current.scrollToMessage(index); // Call scrollToMessage using the ref\r\n    }\r\n  };\r\n\r\n\r\n  const handleSendMessage = (message) => {\r\n    setMessages((prevMessages) => [...prevMessages, message]);\r\n\r\n    // Only set currentResponseIndex if the message is from the bot\r\n    if (message.sender === \"bot\") {\r\n      setCurrentResponseIndex(messages.length); // Set current index to the latest bot message\r\n    }\r\n  };\r\n\r\n  const handleNewChat = () => {\r\n\r\n    setMessages([]);\r\n    setCurrentResponseIndex(-1);\r\n  };\r\n\r\n\r\n// Handle navigating to the previous bot response\r\nconst handlePreviousResponse = () => {\r\n  for (let i = currentResponseIndex - 1; i >= 0; i--) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      handleScrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n// Handle navigating to the next bot response\r\nconst handleNextResponse = () => {\r\n  for (let i = currentResponseIndex + 1; i < messages.length; i++) {\r\n    if (messages[i].sender === \"bot\") {\r\n      setCurrentResponseIndex(i);\r\n      handleScrollToMessage(i); // Scroll to the message\r\n      setTimeout(() => setCurrentResponseIndex(-1), 3000); // Remove highlight after 3 seconds\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Navbar\r\n        onNewChat={handleNewChat}\r\n        onPreviousResponse={handlePreviousResponse}\r\n        onNextResponse={handleNextResponse}\r\n      />\r\n      <ChatDisplay messages={messages} currentResponseIndex={currentResponseIndex} />\r\n      <ChatInput onSendMessage={handleSendMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,KAAO,OAAO,CAC9C,MAAQ,CAAAC,WAAW,KAAM,eAAe,CACxC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,MAAM,KAAM,cAAc,CACjC,MAAO,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACY,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CACpE,KAAM,CAAAc,OAAO,CAAGb,MAAM,CAAC,IAAI,CAAC,CAG5B,KAAM,CAAAc,qBAAqB,CAAIC,KAAK,EAAK,CACvC,GAAIF,OAAO,CAACG,OAAO,CAAE,CACnBH,OAAO,CAACG,OAAO,CAACC,eAAe,CAACF,KAAK,CAAC,CAAE;AAC1C,CACF,CAAC,CAGD,KAAM,CAAAG,iBAAiB,CAAIC,OAAO,EAAK,CACrCT,WAAW,CAAEU,YAAY,EAAK,CAAC,GAAGA,YAAY,CAAED,OAAO,CAAC,CAAC,CAEzD;AACA,GAAIA,OAAO,CAACE,MAAM,GAAK,KAAK,CAAE,CAC5BT,uBAAuB,CAACH,QAAQ,CAACa,MAAM,CAAC,CAAE;AAC5C,CACF,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAE1Bb,WAAW,CAAC,EAAE,CAAC,CACfE,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAC7B,CAAC,CAGH;AACA,KAAM,CAAAY,sBAAsB,CAAGA,CAAA,GAAM,CACnC,IAAK,GAAI,CAAAC,CAAC,CAAGd,oBAAoB,CAAG,CAAC,CAAEc,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAClD,GAAIhB,QAAQ,CAACgB,CAAC,CAAC,CAACJ,MAAM,GAAK,KAAK,CAAE,CAChCT,uBAAuB,CAACa,CAAC,CAAC,CAC1BX,qBAAqB,CAACW,CAAC,CAAC,CAAE;AAC1BC,UAAU,CAAC,IAAMd,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AACrD,OACF,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAAe,kBAAkB,CAAGA,CAAA,GAAM,CAC/B,IAAK,GAAI,CAAAF,CAAC,CAAGd,oBAAoB,CAAG,CAAC,CAAEc,CAAC,CAAGhB,QAAQ,CAACa,MAAM,CAAEG,CAAC,EAAE,CAAE,CAC/D,GAAIhB,QAAQ,CAACgB,CAAC,CAAC,CAACJ,MAAM,GAAK,KAAK,CAAE,CAChCT,uBAAuB,CAACa,CAAC,CAAC,CAC1BX,qBAAqB,CAACW,CAAC,CAAC,CAAE;AAC1BC,UAAU,CAAC,IAAMd,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AACrD,OACF,CACF,CACF,CAAC,CAEC,mBACEL,KAAA,QAAKqB,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BxB,IAAA,CAACF,MAAM,EACL2B,SAAS,CAAEP,aAAc,CACzBQ,kBAAkB,CAAEP,sBAAuB,CAC3CQ,cAAc,CAAEL,kBAAmB,CACpC,CAAC,cACFtB,IAAA,CAACJ,WAAW,EAACQ,QAAQ,CAAEA,QAAS,CAACE,oBAAoB,CAAEA,oBAAqB,CAAE,CAAC,cAC/EN,IAAA,CAACH,SAAS,EAAC+B,aAAa,CAAEf,iBAAkB,CAAC,CAAC,EAC3C,CAAC,CAEV,CAAC,CAED,cAAe,CAAAV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}