{"ast":null,"code":"var _s = $RefreshSig$();\n// TextToSpeech.js (Inside your voice folder)\n// const TextToSpeech = (text) => {\n//   const speech = new SpeechSynthesisUtterance(text);\n//   speech.lang = \"en-US\";  // Set the language. You can adjust to other languages as needed.\n//   speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Select a voice\n//   speech.volume = 1;  // Max volume\n//   speech.rate = 1;    // Normal speed\n//   speech.pitch = 1;   // Normal pitch\n//   speechSynthesis.speak(speech);\n// };\n\n// export default TextToSpeech;\n\nimport { useEffect } from 'react';\nconst TextToSpeech = textData => {\n  _s();\n  useEffect(() => {\n    if (!textData || !textData.trim()) return; // Check if textData is not empty\n\n    const speech = new SpeechSynthesisUtterance(textData);\n\n    // Select a female voice if available, otherwise default to first available voice\n    const voices = window.speechSynthesis.getVoices();\n    const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n    speech.voice = femaleVoice;\n\n    // Speak the text\n    window.speechSynthesis.speak(speech);\n  }, [textData]); // This will run when textData changes\n};\n_s(TextToSpeech, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["useEffect","TextToSpeech","textData","_s","trim","speech","SpeechSynthesisUtterance","voices","window","speechSynthesis","getVoices","femaleVoice","find","voice","name","toLowerCase","includes","speak","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["// TextToSpeech.js (Inside your voice folder)\r\n// const TextToSpeech = (text) => {\r\n//   const speech = new SpeechSynthesisUtterance(text);\r\n//   speech.lang = \"en-US\";  // Set the language. You can adjust to other languages as needed.\r\n//   speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Select a voice\r\n//   speech.volume = 1;  // Max volume\r\n//   speech.rate = 1;    // Normal speed\r\n//   speech.pitch = 1;   // Normal pitch\r\n//   speechSynthesis.speak(speech);\r\n// };\r\n\r\n// export default TextToSpeech;\r\n\r\n\r\n\r\n\r\n\r\nimport { useEffect } from 'react';\r\n\r\nconst TextToSpeech = (textData) => {\r\n  useEffect(() => {\r\n    if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n    const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n    // Select a female voice if available, otherwise default to first available voice\r\n    const voices = window.speechSynthesis.getVoices();\r\n    const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n    speech.voice = femaleVoice;\r\n\r\n    // Speak the text\r\n    window.speechSynthesis.speak(speech);\r\n  }, [textData]); // This will run when textData changes\r\n\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,SAASA,SAAS,QAAQ,OAAO;AAEjC,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACjCH,SAAS,CAAC,MAAM;IACd,IAAI,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAACE,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC;;IAE3C,MAAMC,MAAM,GAAG,IAAIC,wBAAwB,CAACJ,QAAQ,CAAC;;IAErD;IACA,MAAMK,MAAM,GAAGC,MAAM,CAACC,eAAe,CAACC,SAAS,CAAC,CAAC;IACjD,MAAMC,WAAW,GAAGJ,MAAM,CAACK,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAIT,MAAM,CAAC,CAAC,CAAC;IAClGF,MAAM,CAACQ,KAAK,GAAGF,WAAW;;IAE1B;IACAH,MAAM,CAACC,eAAe,CAACQ,KAAK,CAACZ,MAAM,CAAC;EACtC,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;AAElB,CAAC;AAACC,EAAA,CAfIF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAiBlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}