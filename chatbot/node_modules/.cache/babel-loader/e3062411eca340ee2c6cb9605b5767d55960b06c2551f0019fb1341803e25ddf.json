{"ast":null,"code":"var _s = $RefreshSig$();\n// src/useVoiceRecognition.js\n\nimport { useState, useEffect } from 'react';\nconst useVoiceRecognition = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognitionInstance = new SpeechRecognition();\n      recognitionInstance.interimResults = true; // Get interim results\n      recognitionInstance.lang = 'en-US'; // Set language\n\n      recognitionInstance.onresult = event => {\n        const currentTranscript = Array.from(event.results).map(result => result[0].transcript).join('');\n        setTranscript(currentTranscript);\n      };\n      recognitionInstance.onend = () => {\n        // Automatically restart recognition if needed\n        recognitionInstance.start();\n      };\n      setRecognition(recognitionInstance);\n    } else {\n      console.error('Speech recognition not supported in this browser.');\n    }\n  }, []);\n  const startListening = () => {\n    if (recognition) {\n      setTranscript(''); // Clear previous transcript\n      recognition.start();\n    }\n  };\n  const stopListening = () => {\n    if (recognition) {\n      recognition.stop();\n    }\n  };\n  return {\n    transcript,\n    startListening,\n    stopListening\n  };\n};\n_s(useVoiceRecognition, \"D0AebQ+YIelTB+4fcC8x16e0LLk=\");\nexport default useVoiceRecognition;","map":{"version":3,"names":["useState","useEffect","useVoiceRecognition","_s","transcript","setTranscript","recognition","setRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognitionInstance","interimResults","lang","onresult","event","currentTranscript","Array","from","results","map","result","join","onend","start","console","error","startListening","stopListening","stop"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/voice/voice-to-text.js"],"sourcesContent":["// src/useVoiceRecognition.js\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useVoiceRecognition = () => {\r\n    const [transcript, setTranscript] = useState('');\r\n    const [recognition, setRecognition] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        if (SpeechRecognition) {\r\n            const recognitionInstance = new SpeechRecognition();\r\n            recognitionInstance.interimResults = true; // Get interim results\r\n            recognitionInstance.lang = 'en-US'; // Set language\r\n\r\n            recognitionInstance.onresult = (event) => {\r\n                const currentTranscript = Array.from(event.results)\r\n                    .map(result => result[0].transcript)\r\n                    .join('');\r\n                setTranscript(currentTranscript);\r\n            };\r\n\r\n            recognitionInstance.onend = () => {\r\n                // Automatically restart recognition if needed\r\n                recognitionInstance.start();\r\n            };\r\n\r\n            setRecognition(recognitionInstance);\r\n        } else {\r\n            console.error('Speech recognition not supported in this browser.');\r\n        }\r\n    }, []);\r\n\r\n    const startListening = () => {\r\n        if (recognition) {\r\n            setTranscript(''); // Clear previous transcript\r\n            recognition.start();\r\n        }\r\n    };\r\n\r\n    const stopListening = () => {\r\n        if (recognition) {\r\n            recognition.stop();\r\n        }\r\n    };\r\n\r\n    return { transcript, startListening, stopListening };\r\n};\r\n\r\nexport default useVoiceRecognition;"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAMO,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IACpF,IAAIF,iBAAiB,EAAE;MACnB,MAAMG,mBAAmB,GAAG,IAAIH,iBAAiB,CAAC,CAAC;MACnDG,mBAAmB,CAACC,cAAc,GAAG,IAAI,CAAC,CAAC;MAC3CD,mBAAmB,CAACE,IAAI,GAAG,OAAO,CAAC,CAAC;;MAEpCF,mBAAmB,CAACG,QAAQ,GAAIC,KAAK,IAAK;QACtC,MAAMC,iBAAiB,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC,CAC9CC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,CAACjB,UAAU,CAAC,CACnCkB,IAAI,CAAC,EAAE,CAAC;QACbjB,aAAa,CAACW,iBAAiB,CAAC;MACpC,CAAC;MAEDL,mBAAmB,CAACY,KAAK,GAAG,MAAM;QAC9B;QACAZ,mBAAmB,CAACa,KAAK,CAAC,CAAC;MAC/B,CAAC;MAEDjB,cAAc,CAACI,mBAAmB,CAAC;IACvC,CAAC,MAAM;MACHc,OAAO,CAACC,KAAK,CAAC,mDAAmD,CAAC;IACtE;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIrB,WAAW,EAAE;MACbD,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;MACnBC,WAAW,CAACkB,KAAK,CAAC,CAAC;IACvB;EACJ,CAAC;EAED,MAAMI,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAItB,WAAW,EAAE;MACbA,WAAW,CAACuB,IAAI,CAAC,CAAC;IACtB;EACJ,CAAC;EAED,OAAO;IAAEzB,UAAU;IAAEuB,cAAc;IAAEC;EAAc,CAAC;AACxD,CAAC;AAACzB,EAAA,CA3CID,mBAAmB;AA6CzB,eAAeA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}