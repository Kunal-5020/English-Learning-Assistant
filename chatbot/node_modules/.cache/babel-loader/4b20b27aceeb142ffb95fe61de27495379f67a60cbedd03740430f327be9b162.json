{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Desktop\\\\office work\\\\Hindi Chat Bot\\\\chatbot\\\\src\\\\component\\\\ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaMicrophone } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport \"./css/ChatInput.css\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  onSendMessage\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const {\n    transcript,\n    browserSupportsSpeechRecognition,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [history, setHistory] = useState([]); // Store conversation history\n  const [UserResponse, loadResponse] = useState(\"\"); // Store the user response given by API\n  const [conversationStarted, setConversationStarted] = useState(false); // Track if conversation is started\n\n  // Start listening when mic button is clicked\n  const startListening = () => {\n    resetTranscript(); // Clear previous transcript\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en'\n    });\n  };\n  useEffect(() => {\n    console.log('UserResponse Updated:', UserResponse);\n  }, [UserResponse]);\n  useEffect(() => {\n    setInput(transcript);\n  }, [transcript]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Browser does not support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Handle starting the conversation\n  const handleStartConversation = async () => {\n    const startMessage = \"Start the conversation\"; // Message to start the conversation\n\n    // Send the start message to API\n    const userMessage = {\n      text: startMessage,\n      sender: \"user\"\n    };\n    setHistory(prevHistory => [...prevHistory, userMessage]);\n    onSendMessage(userMessage);\n\n    // Call API and get the predefined response\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/chat/generate\", {\n        messagePayload: {\n          history: [userMessage],\n          current_message: {\n            sender: \"user\",\n            text: startMessage\n          }\n        }\n      });\n      const Response = response.data.response;\n      const botResponse = Response.BotResponse;\n      const userResponse = Response.UserResponse;\n      const botMessage = {\n        text: botResponse,\n        sender: \"bot\"\n      };\n      setHistory(prevHistory => [...prevHistory, botMessage]);\n\n      // Send bot response to parent component\n      onSendMessage(botMessage);\n\n      // Store the expected user response for matching later\n      loadResponse(userResponse);\n      setConversationStarted(true); // Conversation has now started\n    } catch (error) {\n      console.error(\"Error starting conversation:\", error);\n    }\n  };\n\n  // Handle sending user input\n  const handleSend = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: \"user\"\n      };\n      setHistory(prevHistory => [...prevHistory, userMessage]);\n      onSendMessage({\n        text: input,\n        sender: \"user\"\n      });\n      setInput(\"\"); // Clear the input after message is sent\n\n      // Check if user response matches predefined response\n      if (input.trim() === UserResponse.trim()) {\n        // If user response matches, send it to the API\n        try {\n          const messagePayload = {\n            history: history.concat(userMessage),\n            current_message: {\n              sender: \"user\",\n              text: input\n            }\n          };\n          const requestPayload = {\n            messagePayload: messagePayload\n          };\n          const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\n          const Response = response.data.response;\n          const botResponse = Response.BotResponse;\n          const userResponse = Response.UserResponse;\n          const botMessage = {\n            text: botResponse,\n            sender: \"bot\"\n          };\n          setHistory(prevHistory => [...prevHistory, botMessage]);\n          onSendMessage(botMessage);\n          loadResponse(userResponse); // Update UserResponse for next step\n        } catch (error) {\n          console.error(\"Error sending message:\", error);\n        }\n      } else {\n        alert(\"Your response doesn't match the expected reply. Please try again.\");\n      }\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\n    }\n  };\n\n  // Handle key press to send message on Enter key\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input\",\n    children: [conversationStarted && UserResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-response-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Expected User Response: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), UserResponse]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), !conversationStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-button\",\n      onClick: handleStartConversation,\n      children: \"Start the conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown // Handle Enter key for sending\n        ,\n        placeholder: \"Type your response here\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mic-button\",\n        onMouseUp: SpeechRecognition.stopListening,\n        onMouseDown: startListening,\n        children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\n            stroke: \"#2f2f2f\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this);\n};\n_s(ChatInput, \"fhG0uu0tUNb6ammUKhOM8SlDUQ0=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","useEffect","FaMicrophone","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatInput","onSendMessage","_s","input","setInput","transcript","browserSupportsSpeechRecognition","resetTranscript","history","setHistory","UserResponse","loadResponse","conversationStarted","setConversationStarted","startListening","continuous","language","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","handleStartConversation","startMessage","userMessage","text","sender","prevHistory","response","post","messagePayload","current_message","Response","data","botResponse","BotResponse","userResponse","botMessage","error","handleSend","trim","concat","requestPayload","alert","stopListening","handleKeyDown","e","key","className","onClick","type","value","onChange","target","onKeyDown","placeholder","onMouseUp","onMouseDown","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/component/ChatInput.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\nimport \"./css/ChatInput.css\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst ChatInput = ({ onSendMessage }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n  const [history, setHistory] = useState([]);  // Store conversation history\r\n  const [UserResponse, loadResponse] = useState(\"\"); // Store the user response given by API\r\n  const [conversationStarted, setConversationStarted] = useState(false); // Track if conversation is started\r\n  \r\n  // Start listening when mic button is clicked\r\n  const startListening = () => {\r\n    resetTranscript(); // Clear previous transcript\r\n    SpeechRecognition.startListening({ continuous: true, language: 'en' });\r\n  };\r\n  useEffect(() => {\r\n    console.log('UserResponse Updated:', UserResponse);\r\n  }, [UserResponse]);\r\n  \r\n\r\n  useEffect(() => {\r\n    setInput(transcript);\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Browser does not support speech recognition.</p>;\r\n  }\r\n\r\n  // Handle starting the conversation\r\n  const handleStartConversation = async () => {\r\n    const startMessage = \"Start the conversation\"; // Message to start the conversation\r\n\r\n    // Send the start message to API\r\n    const userMessage = { text: startMessage, sender: \"user\" };\r\n    setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n    onSendMessage(userMessage);\r\n    \r\n    // Call API and get the predefined response\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/chat/generate\", {\r\n        messagePayload: {\r\n          history: [userMessage],\r\n          current_message: { sender: \"user\", text: startMessage }\r\n        }\r\n      });\r\n\r\n      const Response = response.data.response;\r\n      const botResponse = Response.BotResponse;\r\n      const userResponse = Response.UserResponse;\r\n\r\n      const botMessage = { text: botResponse, sender: \"bot\" };\r\n      setHistory((prevHistory) => [...prevHistory, botMessage]);\r\n\r\n      // Send bot response to parent component\r\n      onSendMessage(botMessage);\r\n\r\n      // Store the expected user response for matching later\r\n      loadResponse(userResponse);\r\n\r\n      setConversationStarted(true); // Conversation has now started\r\n    } catch (error) {\r\n      console.error(\"Error starting conversation:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle sending user input\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n      const userMessage = { text: input, sender: \"user\" };\r\n      setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n      onSendMessage({ text: input, sender: \"user\" });\r\n      setInput(\"\"); // Clear the input after message is sent\r\n\r\n      // Check if user response matches predefined response\r\n      if (input.trim() === UserResponse.trim()) {\r\n        // If user response matches, send it to the API\r\n        try {\r\n          const messagePayload = {\r\n            history: history.concat(userMessage),\r\n            current_message: { sender: \"user\", text: input }\r\n          };\r\n\r\n          const requestPayload = { messagePayload: messagePayload };\r\n          const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\r\n\r\n          const Response = response.data.response;\r\n          const botResponse = Response.BotResponse;\r\n          const userResponse = Response.UserResponse;\r\n\r\n          const botMessage = { text: botResponse, sender: \"bot\" };\r\n          setHistory((prevHistory) => [...prevHistory, botMessage]);\r\n\r\n          onSendMessage(botMessage);\r\n          loadResponse(userResponse); // Update UserResponse for next step\r\n        } catch (error) {\r\n          console.error(\"Error sending message:\", error);\r\n        }\r\n      } else {\r\n        alert(\"Your response doesn't match the expected reply. Please try again.\");\r\n      }\r\n\r\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\r\n    }\r\n  };\r\n\r\n  // Handle key press to send message on Enter key\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n      <div className=\"chat-input\">\r\n        {/* Display UserResponse above the input field */}\r\n        {conversationStarted && UserResponse && (\r\n          <div className=\"user-response-display\">\r\n            <strong>Expected User Response: </strong>{UserResponse}\r\n          </div>\r\n        )}\r\n\r\n        {/* Show 'start the conversation' button if conversation hasn't started */}\r\n        {!conversationStarted ? (\r\n          <button className=\"start-button\" onClick={handleStartConversation}>\r\n            Start the conversation\r\n          </button>\r\n        ) : (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyDown={handleKeyDown}  // Handle Enter key for sending\r\n              placeholder=\"Type your response here\"\r\n              className=\"input-field\"\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {/* Wrapper for buttons (mic and send) */}\r\n        <div className=\"buttons-container\">\r\n          <button\r\n            className=\"mic-button\"\r\n            onMouseUp={SpeechRecognition.stopListening}\r\n            onMouseDown={startListening}\r\n          >\r\n            <FaMicrophone />\r\n          </button>\r\n          <button onClick={handleSend} className=\"send-button\">\r\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path d=\"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\" stroke=\"#2f2f2f\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}