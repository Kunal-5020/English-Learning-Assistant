{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Desktop\\\\office work\\\\Hindi Chat Bot\\\\chatbot\\\\src\\\\component\\\\ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaMicrophone } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport \"./css/ChatInput.css\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  onSendMessage\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const {\n    transcript,\n    browserSupportsSpeechRecognition,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [history, setHistory] = useState([]); // Store conversation history\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n\n  // Typing effect state\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const fullText = \"Hey! I’m here to make studying simple and engaging!\";\n  useEffect(() => {\n    let index = 0;\n    const typingInterval = setInterval(() => {\n      setDisplayedText(prev => prev + fullText[index]);\n      index += 1;\n      if (index === fullText.length) {\n        clearInterval(typingInterval);\n      }\n    }, 70); // Adjust speed as needed\n\n    return () => clearInterval(typingInterval); // Clear interval on component unmount\n  }, []);\n  const startListening = () => {\n    resetTranscript(); // Clear previous transcript\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: 'en-IN'\n    });\n  };\n  useEffect(() => {\n    setInput(transcript);\n  }, [transcript]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Browser does not support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  const handleSend = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: \"user\"\n      };\n      setHistory(prevHistory => [...prevHistory, userMessage]);\n      onSendMessage({\n        text: input,\n        sender: \"user\"\n      });\n      setIsFirstMessageSent(true); // Set first message flag to true\n      setInput(\"\"); // Clear the input after message is sent\n\n      try {\n        // Prepare the messagePayload to send to the API\n        const messagePayload = {\n          history: history.concat(userMessage),\n          current_message: {\n            sender: \"user\",\n            text: input\n          }\n        };\n\n        // Wrap messagePayload in a larger object as required by the server\n        const requestPayload = {\n          messagePayload: messagePayload\n        };\n        console.log(requestPayload); // Log the request to ensure it's correct\n\n        // Send message to the API\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\n        const botResponse = response.data.response;\n        const botMessage = {\n          text: botResponse,\n          sender: \"bot\"\n        };\n\n        // Update history with bot response\n        setHistory(prevHistory => [...prevHistory, botMessage]);\n\n        // Send bot response to the parent component\n        onSendMessage({\n          text: botResponse,\n          sender: \"bot\"\n        });\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isFirstMessageSent && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"welcome-heading\",\n      children: displayedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-input ${isFirstMessageSent ? \"bottom\" : \"center\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown // Handle Enter key for sending\n        ,\n        placeholder: \"Type your message or hold the button to speak...\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        className: \"send-button\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\",\n            stroke: \"#2f2f2f\",\n            strokeWidth: \"1.5\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mic-button\",\n        onMouseUp: SpeechRecognition.stopListening,\n        onMouseDown: startListening,\n        children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatInput, \"XUQzz2odtO5v8FzwxdHcwizXNxM=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","useEffect","FaMicrophone","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatInput","onSendMessage","_s","input","setInput","transcript","browserSupportsSpeechRecognition","resetTranscript","history","setHistory","isFirstMessageSent","setIsFirstMessageSent","displayedText","setDisplayedText","fullText","index","typingInterval","setInterval","prev","length","clearInterval","startListening","continuous","language","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSend","trim","userMessage","text","sender","prevHistory","messagePayload","concat","current_message","requestPayload","console","log","response","post","botResponse","data","botMessage","error","stopListening","handleKeyDown","e","key","className","type","value","onChange","target","onKeyDown","placeholder","onClick","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","onMouseUp","onMouseDown","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Desktop/office work/Hindi Chat Bot/chatbot/src/component/ChatInput.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\nimport \"./css/ChatInput.css\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst ChatInput = ({ onSendMessage }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n  const [history, setHistory] = useState([]);  // Store conversation history\r\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\r\n\r\n   // Typing effect state\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const fullText = \"Hey! I’m here to make studying simple and engaging!\";\r\n  \r\n  useEffect(() => {\r\n    let index = 0;\r\n    const typingInterval = setInterval(() => {\r\n      setDisplayedText((prev) => prev + fullText[index]);\r\n      index += 1;\r\n      if (index === fullText.length) {\r\n        clearInterval(typingInterval);\r\n      }\r\n     }, 70); // Adjust speed as needed\r\n\r\n     return () => clearInterval(typingInterval); // Clear interval on component unmount\r\n  }, []);\r\n\r\n  const startListening = () => {\r\n    resetTranscript(); // Clear previous transcript\r\n    SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInput(transcript);\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Browser does not support speech recognition.</p>;\r\n  }\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim()) {\r\n\r\n      const userMessage = { text: input, sender: \"user\" };\r\n      setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n      onSendMessage({ text: input, sender: \"user\" });\r\n      setIsFirstMessageSent(true); // Set first message flag to true\r\n      setInput(\"\"); // Clear the input after message is sent\r\n\r\n      try {\r\n        // Prepare the messagePayload to send to the API\r\n        const messagePayload = {\r\n          history: history.concat(userMessage),\r\n          current_message: { sender: \"user\", text: input }\r\n        };\r\n\r\n        // Wrap messagePayload in a larger object as required by the server\r\n        const requestPayload = {\r\n          messagePayload: messagePayload\r\n        };\r\n\r\n        console.log(requestPayload); // Log the request to ensure it's correct\r\n\r\n        // Send message to the API\r\n        const response = await axios.post(\"http://localhost:5000/api/chat/generate\", requestPayload);\r\n        const botResponse = response.data.response;\r\n\r\n        const botMessage = { text: botResponse, sender: \"bot\" };\r\n\r\n        // Update history with bot response\r\n        setHistory((prevHistory) => [...prevHistory, botMessage]);\r\n\r\n        // Send bot response to the parent component\r\n        onSendMessage({ text: botResponse, sender: \"bot\" });\r\n\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error);\r\n      }\r\n\r\n      SpeechRecognition.stopListening(); // Stop listening after sending the message\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (<>\r\n    {!isFirstMessageSent && <h2 className=\"welcome-heading\">\r\n      {displayedText}\r\n      </h2>}\r\n    <div className={`chat-input ${isFirstMessageSent ? \"bottom\" : \"center\"}`}>\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleKeyDown}  // Handle Enter key for sending\r\n        placeholder=\"Type your message or hold the button to speak...\"\r\n        className=\"input-field\"\r\n      />\r\n      <button onClick={handleSend} className=\"send-button\">\r\n        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M12 7V17M12 7L16 11M12 7L8 11M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z\" stroke=\"#2f2f2f\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></path>\r\n        </svg>\r\n      </button>\r\n      <button \r\n        className=\"mic-button\" \r\n        onMouseUp={SpeechRecognition.stopListening}\r\n        onMouseDown={startListening}>\r\n        <FaMicrophone />\r\n      </button>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}