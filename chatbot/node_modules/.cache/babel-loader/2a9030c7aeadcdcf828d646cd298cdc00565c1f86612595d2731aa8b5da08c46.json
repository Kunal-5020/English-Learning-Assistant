{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Documents\\\\Github\\\\English-Learning-Assistant\\\\chatbot\\\\src\\\\component\\\\ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaMicrophone } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport \"./css/ChatInput.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  onSendMessage,\n  handleExpectedResponse\n}) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const {\n    transcript,\n    browserSupportsSpeechRecognition,\n    resetTranscript\n  } = useSpeechRecognition();\n  const [history, setHistory] = useState([]);\n  const [conversationStarted, setConversationStarted] = useState(false);\n\n  // Start listening for speech\n  const startListening = () => {\n    resetTranscript();\n    SpeechRecognition.startListening({\n      continuous: true,\n      language: \"en\"\n    });\n  };\n\n  // Stop listening for speech and send the message\n  const stopListeningAndSend = async () => {\n    SpeechRecognition.stopListening(); // Stop the microphone listening\n    if (transcript.trim()) {\n      const userMessage = {\n        text: transcript,\n        sender: \"user\"\n      };\n      setHistory(prevHistory => [...prevHistory, userMessage]);\n      onSendMessage(userMessage); // Send the message to parent component\n\n      setInput(\"\"); // Optionally clear input after sending message\n\n      try {\n        const messagePayload = {\n          history: history.concat(userMessage),\n          current_message: {\n            sender: \"user\",\n            text: transcript\n          }\n        };\n        const response = await axios.post(\"https://english-assistant-server.onrender.com/api/chat/generate\", {\n          messagePayload\n        });\n        const Response = response.data.response;\n        const botResponse = Response.BotResponse;\n        const userResponse = Response.UserResponse;\n        setHistory(prevHistory => [...prevHistory, {\n          text: botResponse,\n          sender: \"bot\"\n        }]);\n        onSendMessage({\n          text: botResponse,\n          sender: \"bot\"\n        });\n        handleExpectedResponse(userResponse);\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    }\n  };\n\n  // Handle starting the conversation\n  const handleStartConversation = async () => {\n    const startMessage = \"Start the conversation\";\n    const userMessage = {\n      text: startMessage,\n      sender: \"user\"\n    };\n    setHistory(prevHistory => [...prevHistory, userMessage]);\n    onSendMessage(userMessage);\n    try {\n      const response = await axios.post(\"https://english-assistant-server.onrender.com/api/chat/generate\", {\n        messagePayload: {\n          history: [userMessage],\n          current_message: {\n            sender: \"user\",\n            text: startMessage\n          }\n        }\n      });\n      const Response = response.data.response;\n      const botResponse = Response.BotResponse;\n      const userResponse = Response.UserResponse;\n      setHistory(prevHistory => [...prevHistory, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n      onSendMessage({\n        text: botResponse,\n        sender: \"bot\"\n      });\n      setConversationStarted(true);\n    } catch (error) {\n      console.error(\"Error starting conversation:\", error);\n    }\n  };\n  useEffect(() => {\n    setInput(transcript);\n  }, [transcript]);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your browser does not support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-response-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), \"   \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: !conversationStarted ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-button\",\n        onClick: handleStartConversation,\n        children: \"Start the Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mic-button\",\n          onMouseDown: startListening // Start listening when the mic button is pressed\n          ,\n          onMouseUp: stopListeningAndSend // Stop listening and send the message when the mic button is released\n          ,\n          children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInput, \"uzM5M36rQXPgQenAJ4t+G0sw/hE=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","useEffect","FaMicrophone","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatInput","onSendMessage","handleExpectedResponse","_s","input","setInput","transcript","browserSupportsSpeechRecognition","resetTranscript","history","setHistory","conversationStarted","setConversationStarted","startListening","continuous","language","stopListeningAndSend","stopListening","trim","userMessage","text","sender","prevHistory","messagePayload","concat","current_message","response","post","Response","data","botResponse","BotResponse","userResponse","UserResponse","error","console","handleStartConversation","startMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatInput.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\nimport axios from \"axios\";\r\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\r\nimport \"./css/ChatInput.css\";\r\n\r\nconst ChatInput = ({ onSendMessage, handleExpectedResponse }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n  const [history, setHistory] = useState([]);\r\n  const [conversationStarted, setConversationStarted] = useState(false);\r\n\r\n  // Start listening for speech\r\n  const startListening = () => {\r\n    resetTranscript();\r\n    SpeechRecognition.startListening({ continuous: true, language: \"en\" });\r\n  };\r\n\r\n  // Stop listening for speech and send the message\r\n  const stopListeningAndSend = async () => {\r\n    SpeechRecognition.stopListening();  // Stop the microphone listening\r\n    if (transcript.trim()) {\r\n      const userMessage = { text: transcript, sender: \"user\" };\r\n      setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n      onSendMessage(userMessage);  // Send the message to parent component\r\n\r\n\r\n      setInput(\"\");  // Optionally clear input after sending message\r\n\r\n      try {\r\n        const messagePayload = {\r\n          history: history.concat(userMessage),\r\n          current_message: { sender: \"user\", text: transcript },\r\n        };\r\n\r\n        const response = await axios.post(\"https://english-assistant-server.onrender.com/api/chat/generate\", {\r\n          messagePayload,\r\n        });\r\n\r\n        const Response = response.data.response;\r\n        const botResponse = Response.BotResponse;\r\n        const userResponse = Response.UserResponse;\r\n\r\n        setHistory((prevHistory) => [...prevHistory, { text: botResponse, sender: \"bot\" }]);\r\n        onSendMessage({ text: botResponse, sender: \"bot\" });\r\n        handleExpectedResponse(userResponse);\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle starting the conversation\r\n  const handleStartConversation = async () => {\r\n    const startMessage = \"Start the conversation\";\r\n    const userMessage = { text: startMessage, sender: \"user\" };\r\n    setHistory((prevHistory) => [...prevHistory, userMessage]);\r\n    onSendMessage(userMessage);\r\n\r\n    try {\r\n      const response = await axios.post(\"https://english-assistant-server.onrender.com/api/chat/generate\", {\r\n        messagePayload: {\r\n          history: [userMessage],\r\n          current_message: { sender: \"user\", text: startMessage },\r\n        },\r\n      });\r\n\r\n      const Response = response.data.response;\r\n      const botResponse = Response.BotResponse;\r\n      const userResponse = Response.UserResponse;\r\n\r\n      setHistory((prevHistory) => [...prevHistory, { text: botResponse, sender: \"bot\" }]);\r\n      onSendMessage({ text: botResponse, sender: \"bot\" });\r\n      setConversationStarted(true);\r\n    } catch (error) {\r\n      console.error(\"Error starting conversation:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInput(transcript);\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Your browser does not support speech recognition.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-input\">\r\n      {/* Display recorded words (transcript) in the box */}\r\n      <div className=\"user-response-display\">\r\n        <strong>{transcript}</strong>   {/* Show what's recorded */}\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        {!conversationStarted ? (\r\n          <button className=\"start-button\" onClick={handleStartConversation}>\r\n            Start the Conversation\r\n          </button>\r\n        ) : (\r\n          <>\r\n            <button\r\n              className=\"mic-button\"\r\n              onMouseDown={startListening}  // Start listening when the mic button is pressed\r\n              onMouseUp={stopListeningAndSend}  // Stop listening and send the message when the mic button is released\r\n            >\r\n              <FaMicrophone />\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}