{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Documents\\\\Github\\\\English-Learning-Assistant\\\\chatbot\\\\src\\\\component\\\\ChatDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useImperativeHandle } from \"react\";\nimport \"./css/ChatDisplay.css\";\nimport TextToSpeech from \"../voice/TextToSpeech\"; // Assuming TextToSpeech is set up to handle text input\nimport botIcon from '../asset/ai.png';\nimport speakerIcon from '../asset/speaker.png';\n\n// ChatDisplay Component wrapped with React.forwardRef\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatDisplay = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s(({\n  messages,\n  currentResponseIndex\n}, ref) => {\n  _s();\n  const chatEndRef = useRef(null);\n  const messageRefs = useRef([]); // Reference to store message elements\n  const containerRef = useRef(null); // Reference for the message container\n\n  // Update message refs whenever messages change\n  useEffect(() => {\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\n  }, [messages]);\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages, currentResponseIndex]);\n\n  // Smooth scroll to the target message index\n  const scrollToMessage = index => {\n    if (messageRefs.current[index] && containerRef.current) {\n      const container = containerRef.current;\n      const messageElement = messageRefs.current[index];\n\n      // Calculate the position to center the message\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\n\n      // Set scrollTop directly to ensure exact positioning\n      container.scrollTo({\n        top: centerOffset,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Expose the scrollToMessage function to the parent component\n  useImperativeHandle(ref, () => ({\n    scrollToMessage\n  }));\n\n  // Function to handle the speaker icon click\n  const handleSpeakClick = messageText => {\n    TextToSpeech(messageText); // Pass the message text to TextToSpeech function\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"chat-display\",\n    children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => messageRefs.current[index] = el,\n      className: `message ${msg.sender} ${index === currentResponseIndex ? \"highlighted\" : \"\"}`,\n      children: [msg.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bot-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: botIcon // Use the imported image here\n          ,\n          alt: \"Chatbot Icon\",\n          style: {\n            width: \"50px\",\n            height: \"52px\",\n            paddingBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"message-text\",\n        dangerouslySetInnerHTML: {\n          __html: msg.text\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), msg.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: speakerIcon // Use the imported image here\n        ,\n        alt: \"Speaker Icon\",\n        style: {\n          position: \"absolute\",\n          top: \"25px\",\n          right: \"15px\",\n          height: \"18px\",\n          width: \"18px\",\n          cursor: \"pointer\"\n        },\n        onClick: () => handleSpeakClick(msg.text) // Pass the message's text to the function\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}, \"rZFwHupHJwltFIXD5pIAidsP7rE=\")), \"rZFwHupHJwltFIXD5pIAidsP7rE=\");\n_c2 = ChatDisplay;\nexport default ChatDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatDisplay$React.forwardRef\");\n$RefreshReg$(_c2, \"ChatDisplay\");","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","TextToSpeech","botIcon","speakerIcon","jsxDEV","_jsxDEV","ChatDisplay","_s","forwardRef","_c","messages","currentResponseIndex","ref","chatEndRef","messageRefs","containerRef","current","slice","length","_chatEndRef$current","scrollIntoView","behavior","scrollToMessage","index","container","messageElement","offsetTop","centerOffset","clientHeight","scrollTo","top","handleSpeakClick","messageText","className","children","map","msg","el","sender","src","alt","style","width","height","paddingBottom","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","text","position","right","cursor","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatDisplay.jsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle } from \"react\";\r\nimport \"./css/ChatDisplay.css\";\r\nimport TextToSpeech from \"../voice/TextToSpeech\"; // Assuming TextToSpeech is set up to handle text input\r\nimport botIcon from '../asset/ai.png';\r\nimport speakerIcon from '../asset/speaker.png';\r\n\r\n// ChatDisplay Component wrapped with React.forwardRef\r\nconst ChatDisplay = React.forwardRef(({ messages, currentResponseIndex }, ref) => {\r\n  const chatEndRef = useRef(null);\r\n  const messageRefs = useRef([]); // Reference to store message elements\r\n  const containerRef = useRef(null); // Reference for the message container\r\n\r\n  // Update message refs whenever messages change\r\n  useEffect(() => {\r\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages, currentResponseIndex]);\r\n\r\n  // Smooth scroll to the target message index\r\n  const scrollToMessage = (index) => {\r\n    if (messageRefs.current[index] && containerRef.current) {\r\n      const container = containerRef.current;\r\n      const messageElement = messageRefs.current[index];\r\n\r\n      // Calculate the position to center the message\r\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\r\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\r\n\r\n      // Set scrollTop directly to ensure exact positioning\r\n      container.scrollTo({\r\n        top: centerOffset,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Expose the scrollToMessage function to the parent component\r\n  useImperativeHandle(ref, () => ({\r\n    scrollToMessage,\r\n  }));\r\n\r\n  // Function to handle the speaker icon click\r\n  const handleSpeakClick = (messageText) => {\r\n    TextToSpeech(messageText); // Pass the message text to TextToSpeech function\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"chat-display\">\r\n      {messages.map((msg, index) => (\r\n        <div\r\n          key={index}\r\n          ref={(el) => (messageRefs.current[index] = el)}\r\n          className={`message ${msg.sender} ${index === currentResponseIndex ? \"highlighted\" : \"\"}`}\r\n        >\r\n          {msg.sender === \"bot\" && (\r\n            <span className=\"bot-icon\">\r\n              <img\r\n                src={botIcon} // Use the imported image here\r\n                alt=\"Chatbot Icon\"\r\n                style={{ width: \"50px\", height: \"52px\", paddingBottom: \"10px\" }}\r\n              />\r\n            </span>\r\n          )}\r\n          <span className=\"message-text\" dangerouslySetInnerHTML={{ __html: msg.text }}></span>\r\n          {msg.sender === 'bot' && (\r\n            <img\r\n              src={speakerIcon} // Use the imported image here\r\n              alt=\"Speaker Icon\"\r\n              style={{ position: \"absolute\", top: \"25px\", right: \"15px\", height: \"18px\", width: \"18px\", cursor: \"pointer\" }}\r\n              onClick={() => handleSpeakClick(msg.text)} // Pass the message's text to the function\r\n            />\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div ref={chatEndRef} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}