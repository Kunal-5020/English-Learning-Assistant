{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kunal\\\\OneDrive\\\\Documents\\\\Github\\\\English-Learning-Assistant\\\\chatbot\\\\src\\\\component\\\\ChatDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useImperativeHandle, useState } from \"react\";\nimport \"./css/ChatDisplay.css\";\n// Import the image and TTS function\nimport botIcon from '../asset/ai.png';\n\n// Add the SpeechSynthesis API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst speakText = text => {\n  const speech = new SpeechSynthesisUtterance(text);\n  speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Female voice\n  speechSynthesis.speak(speech);\n};\nconst ChatDisplay = /*#__PURE__*/_s(/*#__PURE__*/React.forwardRef(_c = _s(({\n  messages,\n  currentResponseIndex\n}, ref) => {\n  _s();\n  const [showExpectedResponse, setShowExpectedResponse] = useState(null); // Track which bot message has an expected response\n  const chatEndRef = useRef(null);\n  const messageRefs = useRef([]);\n  const containerRef = useRef(null);\n\n  // Update message refs whenever messages change\n  useEffect(() => {\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\n  }, [messages]);\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages, currentResponseIndex]);\n\n  // Smooth scroll to the target message index\n  const scrollToMessage = index => {\n    if (messageRefs.current[index] && containerRef.current) {\n      const container = containerRef.current;\n      const messageElement = messageRefs.current[index];\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\n      container.scrollTo({\n        top: centerOffset,\n        behavior: \"smooth\"\n      });\n    }\n  };\n  const handleGenerateResponse = index => {\n    setShowExpectedResponse(index);\n    setTimeout(() => {\n      setShowExpectedResponse(null); // Hide expected response after a short delay\n    }, 3000);\n  };\n  const handleSpeakerClick = responseText => {\n    speakText(responseText); // Speak out the response\n  };\n  useImperativeHandle(ref, () => ({\n    scrollToMessage\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"chat-display\",\n    children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => messageRefs.current[index] = el,\n      className: `message ${msg.sender} ${index === currentResponseIndex ? \"highlighted\" : \"\"}`,\n      children: [msg.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bot-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: botIcon,\n          alt: \"Chatbot Icon\",\n          style: {\n            width: \"50px\",\n            height: \"52px\",\n            paddingBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"message-text\",\n        dangerouslySetInnerHTML: {\n          __html: msg.text\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), msg.sender === \"bot\" && !showExpectedResponse && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-reply\",\n        onClick: () => handleGenerateResponse(index),\n        children: \"Generate Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), showExpectedResponse === index && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expected-response\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Expected Reply:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 18\n          }, this), \" \", msg.expectedResponse]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), msg.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"speak-button\",\n        onClick: () => handleSpeakerClick(msg.text),\n        children: \"\\uD83C\\uDF99\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}, \"XaTvm0d0sK4V6HpAC4GNZNcZnJw=\")), \"XaTvm0d0sK4V6HpAC4GNZNcZnJw=\");\n_c2 = ChatDisplay;\nexport default ChatDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatDisplay$React.forwardRef\");\n$RefreshReg$(_c2, \"ChatDisplay\");","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","useState","botIcon","jsxDEV","_jsxDEV","speakText","text","speech","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","find","name","speak","ChatDisplay","_s","forwardRef","_c","messages","currentResponseIndex","ref","showExpectedResponse","setShowExpectedResponse","chatEndRef","messageRefs","containerRef","current","slice","length","_chatEndRef$current","scrollIntoView","behavior","scrollToMessage","index","container","messageElement","offsetTop","centerOffset","clientHeight","scrollTo","top","handleGenerateResponse","setTimeout","handleSpeakerClick","responseText","className","children","map","msg","el","sender","src","alt","style","width","height","paddingBottom","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","onClick","expectedResponse","_c2","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/component/ChatDisplay.jsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle, useState } from \"react\";\r\nimport \"./css/ChatDisplay.css\";\r\n// Import the image and TTS function\r\nimport botIcon from '../asset/ai.png';\r\n\r\n// Add the SpeechSynthesis API function\r\nconst speakText = (text) => {\r\n  const speech = new SpeechSynthesisUtterance(text);\r\n  speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Female voice\r\n  speechSynthesis.speak(speech);\r\n};\r\n\r\nconst ChatDisplay = React.forwardRef(({ messages, currentResponseIndex }, ref) => {\r\n  const [showExpectedResponse, setShowExpectedResponse] = useState(null); // Track which bot message has an expected response\r\n  const chatEndRef = useRef(null);\r\n  const messageRefs = useRef([]);\r\n  const containerRef = useRef(null);\r\n\r\n  // Update message refs whenever messages change\r\n  useEffect(() => {\r\n    messageRefs.current = messageRefs.current.slice(0, messages.length);\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages, currentResponseIndex]);\r\n\r\n  // Smooth scroll to the target message index\r\n  const scrollToMessage = (index) => {\r\n    if (messageRefs.current[index] && containerRef.current) {\r\n      const container = containerRef.current;\r\n      const messageElement = messageRefs.current[index];\r\n      const offsetTop = messageElement.offsetTop - container.offsetTop;\r\n      const centerOffset = offsetTop - container.clientHeight / 2 + messageElement.clientHeight / 2;\r\n      container.scrollTo({ top: centerOffset, behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const handleGenerateResponse = (index) => {\r\n    setShowExpectedResponse(index);\r\n    setTimeout(() => {\r\n      setShowExpectedResponse(null); // Hide expected response after a short delay\r\n    }, 3000);\r\n  };\r\n\r\n  const handleSpeakerClick = (responseText) => {\r\n    speakText(responseText); // Speak out the response\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    scrollToMessage,\r\n  }));\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"chat-display\">\r\n      {messages.map((msg, index) => (\r\n        <div\r\n          key={index}\r\n          ref={(el) => (messageRefs.current[index] = el)}\r\n          className={`message ${msg.sender} ${index === currentResponseIndex ? \"highlighted\" : \"\"}`}\r\n        >\r\n          {msg.sender === \"bot\" && (\r\n            <span className=\"bot-icon\">\r\n              <img \r\n                src={botIcon} \r\n                alt=\"Chatbot Icon\" \r\n                style={{ width: \"50px\", height: \"52px\", paddingBottom: \"10px\" }} \r\n              />\r\n            </span>\r\n          )}\r\n          <span className=\"message-text\" dangerouslySetInnerHTML={{ __html: msg.text }}></span>\r\n\r\n          {/* \"Generate Reply\" button */}\r\n          {msg.sender === \"bot\" && !showExpectedResponse && (\r\n            <button className=\"generate-reply\" onClick={() => handleGenerateResponse(index)}>\r\n              Generate Reply\r\n            </button>\r\n          )}\r\n\r\n          {/* Display Expected Reply */}\r\n          {showExpectedResponse === index && (\r\n            <div className=\"expected-response\">\r\n              <p><strong>Expected Reply:</strong> {msg.expectedResponse}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Speaker button for text-to-speech */}\r\n          {msg.sender === \"bot\" && (\r\n            <button className=\"speak-button\" onClick={() => handleSpeakerClick(msg.text)}>\r\n              🎙️\r\n            </button>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div ref={chatEndRef} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}