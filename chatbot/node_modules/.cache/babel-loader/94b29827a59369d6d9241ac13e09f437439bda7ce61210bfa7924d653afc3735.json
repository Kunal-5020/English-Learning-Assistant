{"ast":null,"code":"// TextToSpeech.js (Inside your voice folder)\nconst TextToSpeech = text => {\n  const speech = new SpeechSynthesisUtterance(text);\n  speech.lang = \"en-US\"; // For English. Use \"en-GB\" for British English, or other languages.\n  speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Choose a female voice\n  speech.volume = 1; // Max volume\n  speech.rate = 1; // Normal speed\n  speech.pitch = 1; // Normal pitch\n  speechSynthesis.speak(speech);\n};\n_c = TextToSpeech;\nexport default TextToSpeech;\n\n// import { useEffect } from 'react';\n\n// const TextToSpeech = (textData) => {\n//   useEffect(() => {\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\n\n//     const speech = new SpeechSynthesisUtterance(textData);\n\n//     // Select a female voice if available, otherwise default to first available voice\n//     const voices = window.speechSynthesis.getVoices();\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\n//     speech.voice = femaleVoice;\n\n//     // Speak the text\n//     window.speechSynthesis.speak(speech);\n//   }, [textData]); // This will run when textData changes\n\n// };\n\n// export default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["TextToSpeech","text","speech","SpeechSynthesisUtterance","lang","voice","speechSynthesis","getVoices","find","name","volume","rate","pitch","speak","_c","$RefreshReg$"],"sources":["C:/Users/kunal/OneDrive/Documents/Github/English-Learning-Assistant/chatbot/src/voice/TextToSpeech.js"],"sourcesContent":["// TextToSpeech.js (Inside your voice folder)\r\nconst TextToSpeech = (text) => {\r\n  const speech = new SpeechSynthesisUtterance(text);\r\n  speech.lang = \"en-US\";  // For English. Use \"en-GB\" for British English, or other languages.\r\n  speech.voice = speechSynthesis.getVoices().find(voice => voice.name === \"Google UK English Female\"); // Choose a female voice\r\n  speech.volume = 1; // Max volume\r\n  speech.rate = 1;   // Normal speed\r\n  speech.pitch = 1;  // Normal pitch\r\n  speechSynthesis.speak(speech);\r\n};\r\n\r\nexport default TextToSpeech;\r\n\r\n\r\n\r\n\r\n\r\n// import { useEffect } from 'react';\r\n\r\n// const TextToSpeech = (textData) => {\r\n//   useEffect(() => {\r\n//     if (!textData || !textData.trim()) return; // Check if textData is not empty\r\n\r\n//     const speech = new SpeechSynthesisUtterance(textData);\r\n\r\n//     // Select a female voice if available, otherwise default to first available voice\r\n//     const voices = window.speechSynthesis.getVoices();\r\n//     const femaleVoice = voices.find(voice => voice.name.toLowerCase().includes('female')) || voices[0];\r\n//     speech.voice = femaleVoice;\r\n\r\n//     // Speak the text\r\n//     window.speechSynthesis.speak(speech);\r\n//   }, [textData]); // This will run when textData changes\r\n\r\n// };\r\n\r\n// export default TextToSpeech;\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAMC,MAAM,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;EACjDC,MAAM,CAACE,IAAI,GAAG,OAAO,CAAC,CAAE;EACxBF,MAAM,CAACG,KAAK,GAAGC,eAAe,CAACC,SAAS,CAAC,CAAC,CAACC,IAAI,CAACH,KAAK,IAAIA,KAAK,CAACI,IAAI,KAAK,0BAA0B,CAAC,CAAC,CAAC;EACrGP,MAAM,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAC;EACnBR,MAAM,CAACS,IAAI,GAAG,CAAC,CAAC,CAAG;EACnBT,MAAM,CAACU,KAAK,GAAG,CAAC,CAAC,CAAE;EACnBN,eAAe,CAACO,KAAK,CAACX,MAAM,CAAC;AAC/B,CAAC;AAACY,EAAA,GARId,YAAY;AAUlB,eAAeA,YAAY;;AAM3B;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}